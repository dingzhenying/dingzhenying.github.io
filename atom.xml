<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iMonster</title>
  
  <subtitle>Always happy little monster</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://imonster.me/"/>
  <updated>2020-07-06T06:34:10.674Z</updated>
  <id>https://imonster.me/</id>
  
  <author>
    <name>丁振莹</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go语言fmt.Sprintf输出格式</title>
    <link href="https://imonster.me/2020/06/30/Go%E8%AF%AD%E8%A8%80fmt.Sprintf%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F/"/>
    <id>https://imonster.me/2020/06/30/Go%E8%AF%AD%E8%A8%80fmt.Sprintf%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F/</id>
    <published>2020-06-30T10:20:53.000Z</published>
    <updated>2020-07-06T06:34:10.674Z</updated>
    
    <content type="html"><![CDATA[<p>在使用golang进行代码开发时，格式化在逻辑中非常常用。使用格式化函数，要注意写法：</p><p>fmt.Sprintf(格式化样式, 参数列表…)</p><a id="more"></a><p>fmt.Sprintf(format string, a …interface{})</p><ul><li>格式化样式：字符串形式，格式化动词以<code>%</code>开头。</li><li>参数列表：多个参数以逗号分隔，个数必须与格式化样式中的个数一一对应，否则运行时会报错。</li></ul><p>下表中标出了常用的一些格式化样式中的动词及功能。</p><p>例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> progress = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> target = <span class="number">8</span></span><br><span class="line"><span class="comment">// 两参数格式化</span></span><br><span class="line">title := fmt.Sprintf(<span class="string">"已采集%d个药草, 还需要%d个完成任务"</span>, progress, target)</span><br><span class="line">fmt.Println(title)</span><br></pre></td></tr></table></figure><p>参数类型解析：</p><table><thead><tr><th>动  词</th><th>功  能</th></tr></thead><tbody><tr><td>%v</td><td>按值的本来值输出</td></tr><tr><td>%+v</td><td>在 %v 基础上，对结构体字段名和值进行展开</td></tr><tr><td>%#v</td><td>输出 Go 语言语法格式的值</td></tr><tr><td>%T</td><td>输出 Go 语言语法格式的类型和值</td></tr><tr><td>%%</td><td>输出 % 本体</td></tr><tr><td>%b</td><td>整型以二进制方式显示</td></tr><tr><td>%o</td><td>整型以八进制方式显示</td></tr><tr><td>%d</td><td>整型以十进制方式显示</td></tr><tr><td>%x</td><td>整型以十六进制方式显示</td></tr><tr><td>%X</td><td>整型以十六进制、字母大写方式显示</td></tr><tr><td>%U</td><td>Unicode 字符</td></tr><tr><td>%f</td><td>浮点数</td></tr><tr><td>%p</td><td>指针，十六进制方式显示</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用golang进行代码开发时，格式化在逻辑中非常常用。使用格式化函数，要注意写法：&lt;/p&gt;
&lt;p&gt;fmt.Sprintf(格式化样式, 参数列表…)&lt;/p&gt;
    
    </summary>
    
    
      <category term="go" scheme="https://imonster.me/categories/go/"/>
    
    
      <category term="go" scheme="https://imonster.me/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>七牛云截屏</title>
    <link href="https://imonster.me/2020/06/22/%E4%B8%83%E7%89%9B%E4%BA%91%E6%88%AA%E5%B1%8F/"/>
    <id>https://imonster.me/2020/06/22/%E4%B8%83%E7%89%9B%E4%BA%91%E6%88%AA%E5%B1%8F/</id>
    <published>2020-06-22T09:57:03.000Z</published>
    <updated>2020-07-06T06:34:11.055Z</updated>
    
    <content type="html"><![CDATA[<pre><code>&lt;p&gt;&lt;img src=&quot;http://7xry05.com1.z0.glb.clouddn.com/201711271942_332.png&quot; alt=&quot;qimage-win&quot;/&gt;&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://travis-ci.org/cdoco/grank&quot; title=&quot;platform&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/platform-win--32%20%7C%20win--64-lightgrey.svg&quot;&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/jiwenxing/qiniu-image-tool-win/archive/v2.0.zip&quot; title=&quot;download&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/download-5.06M%20v2.0-yellowgreen.svg&quot;&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://opensource.org/licenses/MIT&quot; title=&quot;License: MIT&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-MIT-blue.svg&quot;&gt;&lt;/a&gt;</code></pre></div><hr><p>qimage-win 是 windows 版本的 markdown 一键贴图工具，支持本地文件、截图及网络图片一键上传七牛云，并粘贴资源链接至当前编辑器，使用简单方便，从此 markdown 中贴图成为一种享受。</p><h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><a id="more"></a><p>目前已更新到2.x版本，极大的简化了使用方法，详细请参考：<a href="http://jverson.com/2017/05/28/qiniu-image-v2/" target="_blank" rel="noopener">windows版本markdown一键贴图工具</a></p><p>mac版本请移步至：<a href="https://github.com/jiwenxing/qiniu-image-tool" target="_blank" rel="noopener">https://github.com/jiwenxing/qiniu-image-tool</a></p><h1 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h1><ul><li>支持各种图片格式上传</li><li>支持截图及网络图片直接复制上传</li><li>支持包括js、css、视频等各种其它格式本地文件上传</li><li>AutoHotkey开放源码，完全免费</li><li>安装使用非常简单</li></ul><h1 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h1><p><strong><code>qshell</code></strong>  <strong><code>七牛账号</code></strong></p><h1 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h1><ol><li><p>本地图片文件上传 <br/><br><img src="https://github.com/jiwenxing/qiniu-image-tool-win/blob/master/res/local.gif?raw=true" alt=""></p></li><li><p>截图上传  <br/><br><img src="https://github.com/jiwenxing/qiniu-image-tool-win/blob/master/res/screenshot.gif?raw=true" alt=""></p></li><li><p>其它文件上传  <br/><br><img src="https://raw.githubusercontent.com/jiwenxing/qiniu-image-tool-win/master/res/file.gif" alt=""></p></li></ol><p>注：演示gif使用wiznote及licecap制作</p><h1 id="License"><a href="#License" class="headerlink" title="License"></a>License</h1><p><a href="https://github.com/jiwenxing/qiniu-image-tool-win/blob/master/LICENSE" target="_blank" rel="noopener">MIT License</a>.<br>Copyright (c) 2017 Jverson</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;http://7xry05.com1.z0.glb.clouddn.com/201711271942_332.png&amp;quot; alt=&amp;quot;qimage-win&amp;quot;/&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;a target=&amp;quot;_blank&amp;quot; href=&amp;quot;https://travis-ci.org/cdoco/grank&amp;quot; title=&amp;quot;platform&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;https://img.shields.io/badge/platform-win--32%20%7C%20win--64-lightgrey.svg&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;a target=&amp;quot;_blank&amp;quot; href=&amp;quot;https://github.com/jiwenxing/qiniu-image-tool-win/archive/v2.0.zip&amp;quot; title=&amp;quot;download&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;https://img.shields.io/badge/download-5.06M%20v2.0-yellowgreen.svg&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;a target=&amp;quot;_blank&amp;quot; href=&amp;quot;https://opensource.org/licenses/MIT&amp;quot; title=&amp;quot;License: MIT&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;https://img.shields.io/badge/License-MIT-blue.svg&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;qimage-win 是 windows 版本的 markdown 一键贴图工具，支持本地文件、截图及网络图片一键上传七牛云，并粘贴资源链接至当前编辑器，使用简单方便，从此 markdown 中贴图成为一种享受。&lt;/p&gt;
&lt;h1 id=&quot;Usage&quot;&gt;&lt;a href=&quot;#Usage&quot; class=&quot;headerlink&quot; title=&quot;Usage&quot;&gt;&lt;/a&gt;Usage&lt;/h1&gt;
    
    </summary>
    
    
      <category term="博客教程" scheme="https://imonster.me/categories/%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="博客教程" scheme="https://imonster.me/tags/%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>k8s_kuberctl常见指令及操作</title>
    <link href="https://imonster.me/2020/06/12/k8s_kuberctl%E5%B8%B8%E8%A7%81%E6%8C%87%E4%BB%A4%E5%8F%8A%E6%93%8D%E4%BD%9C/"/>
    <id>https://imonster.me/2020/06/12/k8s_kuberctl%E5%B8%B8%E8%A7%81%E6%8C%87%E4%BB%A4%E5%8F%8A%E6%93%8D%E4%BD%9C/</id>
    <published>2020-06-12T03:02:29.000Z</published>
    <updated>2020-07-06T06:34:11.263Z</updated>
    
    <content type="html"><![CDATA[<h3 id="集群信息查看"><a href="#集群信息查看" class="headerlink" title="集群信息查看"></a>集群信息查看</h3><p>kubectl –help   #查询帮助文档</p><p>kubectl labels    #修改标签</p><p>kubectl annotate –help #注释</p><a id="more"></a><p>kubectl api-versions  #查看api版本</p><p>kubectl version  #查看 软件版本</p><p>kubectl api-resources   #查看命令缩写</p><p>scale  增加副本数</p><p>autoscale   利用率 自动缩放</p><p>certificate  证书</p><p>cluster-info  集群信息</p><p>top 看节点的利用率</p><p>cordon   #将节点设置为不可调度</p><p>uncordon   #将节点设置为调度</p><h3 id="创建：-以命令展示，后续在上yaml"><a href="#创建：-以命令展示，后续在上yaml" class="headerlink" title="创建：(以命令展示，后续在上yaml)"></a>创建：(以命令展示，后续在上yaml)</h3><h5 id="yaml创建"><a href="#yaml创建" class="headerlink" title="yaml创建"></a>yaml创建</h5><p>kubectl create namespace yunwei  #创建namespace名为yunwei</p><p>kubectl create -f nginx-deployment.yaml #以yaml文件创建nginx</p><h5 id="指令创建"><a href="#指令创建" class="headerlink" title="指令创建"></a>指令创建</h5><p>kubectl run nginx –replicas=3 –labels=’app=nginx’ –image=nginx:1.10 –port=80   #命令创建，名字nginx，副本3，标签nginx，镜像nginx1.10，端口80</p><h3 id="查看："><a href="#查看：" class="headerlink" title="查看："></a>查看：</h3><p>kubectl get namespace  #查看所有命名空间</p><p>kubectl get all   #查看pod, service,deployment,replicaset资源</p><p>kubectl get pod  #查看已有的pod节点</p><p>kubectl get node   #查看已有的node节点</p><p>kubectl get svc   #查看集群信息</p><p>kubectl get svc nginx-service  #指定集群名查看集群信息</p><p>kubectl get pod -o wide  #显示所在node，IP等信息</p><p>kubectl get deploy   #查看是deploy的资源类型</p><p>kubectl get pods –show-labels  #查询所有的pod和标签</p><p>kubectl get pods -l app=nginx  #指定标签查询pod</p><h3 id="导出："><a href="#导出：" class="headerlink" title="导出："></a>导出：</h3><p>kubectl get deploy/web -o yaml –export &gt; first_deploy.yml  #将此web的deploy以yml文件的格式导出到  first_deploy.yml文件</p><h3 id="发布："><a href="#发布：" class="headerlink" title="发布："></a>发布：</h3><p>kubectl expose deployment nginx –port=88 –target-port=80 –type=NodePort –name=nginx  #指定deployment资源类型，nginx集群，集群的端口88，容器的端口80，NodePort类型 ， 发布的名字nginx</p><h3 id="故障排查"><a href="#故障排查" class="headerlink" title="故障排查"></a>故障排查</h3><p>kubectl describe pod/nginx-7cccd4bdff-9d797 #pod信息，和详细事件</p><p>kubectl logs pod/nginx-7cccd4bdff-9d797  #通过logs查看pod的日志</p><p>kubectl exec -it nginx-7cccd4bdff-9d797 bash #通过exec 进入pod容器的 bash控制台</p><p>###查看详细集群的信息</p><p>kubectl describe service nginx</p><p>kubectl describe  pod nginx-fc9768844-8kg84</p><p>###更新</p><p>kubectl set image deployment/nginx nginx=nginx:1.11 –record=true  #更新deployment/nginx 标签，更新改变的信息，并记录</p><p>kubectl edit deploy/nginx   #编辑deploy/nginx这个资源<br>把nginx的image 修成1.12版本<br>kubectl get all  #查询到所有pod<br>kubectl describe  pod/nginx-fc9768844-8kg84  #找到nginx的资源查看详情</p><p>###资源发布管理</p><p>kubectl rollout status deploy/nginx  #查询状态<br>kubectl rollout history deploy/nginx #查看变更历史</p><p>kubectl scale deploy/nginx –replicas=5  #扩容副本数为5个<br>kubectl scale deploy/nginx –replicas=3  #缩容副本数为3个</p><p>###回滚</p><p>kubectl rollout undo deployment/nginx   #回滚到上个版本<br>kubectl rollout undo deployment/nginx –revision=3 #回滚到第三个版本</p><p>###删除</p><p>kubectl delete service/nginx    #删除service<br>kubectl delete deployment.apps/nginx   #删除deployment</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;集群信息查看&quot;&gt;&lt;a href=&quot;#集群信息查看&quot; class=&quot;headerlink&quot; title=&quot;集群信息查看&quot;&gt;&lt;/a&gt;集群信息查看&lt;/h3&gt;&lt;p&gt;kubectl –help   #查询帮助文档&lt;/p&gt;
&lt;p&gt;kubectl labels    #修改标签&lt;/p&gt;
&lt;p&gt;kubectl annotate –help #注释&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具环境搭建\K8S" scheme="https://imonster.me/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-K8S/"/>
    
    
      <category term="工具环境搭建\K8S" scheme="https://imonster.me/tags/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-K8S/"/>
    
  </entry>
  
  <entry>
    <title>kafka压缩算法性能测试统计</title>
    <link href="https://imonster.me/2020/06/12/kafka%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%BB%9F%E8%AE%A1/"/>
    <id>https://imonster.me/2020/06/12/kafka%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%BB%9F%E8%AE%A1/</id>
    <published>2020-06-12T01:04:35.000Z</published>
    <updated>2020-07-06T06:34:10.727Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200612090751.png" alt=""></p><p> <img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200612090836.png" alt=""></p><p><img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200612090917.png" alt=""></p><a id="more"></a><p>Gzip 压缩比：</p><p>4.9/1.413=3.4678</p><p>4.8/2.25=2.13</p><p>5/2.3=2.1739130434782608695652173913043</p><p>Lz4 压缩比: </p><p>4.9/2.7=1.814</p><p>2.8/2.7=1.714</p><p>5/2.9=1.7241379310344827586206896551724</p><p>Snappy 压缩比：</p><p>4.9/3=1.63</p><p>4.8/3.1=1.548</p><p>5/3.3=1.515</p><p><strong>参考资料</strong></p><p>Facebook提供的压缩算法对比图：</p><p> <img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200612091423.png" alt=""></p><p><img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200612091440.png" alt=""></p><p>原始数据：</p><p>   <img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200612091513.png" alt=""></p><p>Gzip</p><p>   <img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200612091701.png" alt=""></p><p>Lz4</p><p>​      <img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200612093340.png" alt=""></p><p>snappy</p><p> <img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200612093441.png" alt=""></p><p>实时数据量</p><p> <img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200612093733.png" alt=""></p><p> <img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200612093826.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200612090751.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200612090836.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200612090917.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="kafka" scheme="https://imonster.me/categories/kafka/"/>
    
    
      <category term="kafka" scheme="https://imonster.me/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>k3s-api访问</title>
    <link href="https://imonster.me/2020/04/30/k3s-api%E8%AE%BF%E9%97%AE/"/>
    <id>https://imonster.me/2020/04/30/k3s-api%E8%AE%BF%E9%97%AE/</id>
    <published>2020-04-30T09:18:21.000Z</published>
    <updated>2020-07-06T06:34:11.244Z</updated>
    
    <content type="html"><![CDATA[<p> cat .kube/config</p><p>查看登陆密码<br>cat /etc/rancher/k3s/k3s.yaml</p><p>kubectl config view</p><p>apiVersion: v1<br>clusters:</p><ul><li>cluster:<br>  certificate-authority-data: DATA+OMITTED<br>  server: <a href="https://192.168.66.193:6443" target="_blank" rel="noopener">https://192.168.66.193:6443</a><br>name: default<br>contexts:</li><li>context:<br>  cluster: default<br>  user: default<br>name: default<br>current-context: default<br>kind: Config<br>preferences: {}<br>users:</li><li>name: default<br>user:<br>  password: 4f02bc66e734225aab0aa10ced351c1e<br>  username: admin<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>[root@cdh-slave2 .kube]#  kubectl get secrets<br>NAME                  TYPE                                  DATA   AGE<br>default-token-9cv6g   kubernetes.io/service-account-token   3      23h<br>[root@cdh-slave2 .kube]# kubectl describe secret default-token-9cv6g<br>Name:         default-token-9cv6g<br>Namespace:    default<br>Labels:       <none><br>Annotations:  field.cattle.io/projectId: c-ssg4g:p-wkljl<pre><code>kubernetes.io/service-account.name: defaultkubernetes.io/service-account.uid: 9ef4695d-aae1-4628-a234-63a6d351d771</code></pre></li></ul><p>Type:  kubernetes.io/service-account-token</p><h1 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h1><p>ca.crt:     526 bytes<br>namespace:  7 bytes<br>token:      eyJhbGciOiJSUzI1NiIsImtpZCI6ImMzMko2UVlIZ240T1J4TWQtMkliaXFMTUZ3MGw0YWlsQVFLY1JKc0RfVmMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlZmF1bHQtdG9rZW4tOWN2NmciLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVmYXVsdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjllZjQ2OTVkLWFhZTEtNDYyOC1hMjM0LTYzYTZkMzUxZDc3MSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.Hv7VT_2N2J9EDpT2S9cLgxQid7dN85TKvL7AqflsJ7KAh5fG6Bf78X_-MO3SgdUiFR12OqbYB_NqgGReqDYJ_XlydMIf50XLeQzFFuJtu2lP9sgiZJOo6cxu9AiVBiduph2oVRLIr4Z-tRaypEaPN2zJN1ApYOm7n0XYqLNyN1NCyGhl2ekSsoBm9n9mPebkvctAlLBJUVaLcfYZ8bZbXGIbXzPS1RNE7FOmrIOCpV9C42tkBaixNU3RirSJcxHFvlf_x3_hFGYXWOb6qDgtXj0mym1cfNbVwBvwaS2L8FzFGGknWwoscho5syUc9fHWa386eOM2OzjyTDMe9WjinQ</p><pre><code></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; cat .kube/config&lt;/p&gt;
&lt;p&gt;查看登陆密码&lt;br&gt;cat /etc/rancher/k3s/k3s.yaml&lt;/p&gt;
&lt;p&gt;kubectl config view&lt;/p&gt;
&lt;p&gt;apiVersion: v1&lt;br&gt;clusters:&lt;/p&gt;
&lt;ul&gt;
&lt;
      
    
    </summary>
    
    
      <category term="工具环境搭建\k3s" scheme="https://imonster.me/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-k3s/"/>
    
    
      <category term="工具环境搭建\k3s" scheme="https://imonster.me/tags/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-k3s/"/>
    
  </entry>
  
  <entry>
    <title>k3s搭建</title>
    <link href="https://imonster.me/2020/04/29/k3s%E6%90%AD%E5%BB%BA/"/>
    <id>https://imonster.me/2020/04/29/k3s%E6%90%AD%E5%BB%BA/</id>
    <published>2020-04-29T08:50:23.000Z</published>
    <updated>2020-07-06T06:34:11.250Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> cp k3s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br><span class="line"> chmod 755 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;k3s</span><br><span class="line"> export INSTALL_K3S_SKIP_DOWNLOAD&#x3D;true</span><br><span class="line"> iptables -F</span><br><span class="line"> </span><br><span class="line">sh install.sh --docker --no-deploy traefik --cluster-init</span><br><span class="line"></span><br><span class="line">curl -sfL https:&#x2F;&#x2F;docs.rancher.cn&#x2F;k3s&#x2F;k3s-install.sh | INSTALL_K3S_MIRROR&#x3D;cn \sh -s - server --docker --no-deploy traefik --cluster-init --datastore-endpoint&#x3D;&#39;mysql:&#x2F;&#x2F;root:sql_9879@tcp(192.168.66.170:3306)&#x2F;k3s_db&#39;</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">systemctl status k3s.service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;k3s.service.env</span><br><span class="line">&#x2F;&#x2F;获取token</span><br><span class="line">cat &#x2F;var&#x2F;lib&#x2F;rancher&#x2F;k3s&#x2F;server&#x2F;node-token</span><br><span class="line"></span><br><span class="line">export K3S_URL&#x3D;https:&#x2F;&#x2F;192.168.66.193:6443</span><br><span class="line">export K3S_TOKEN&#x3D;K109e0f10a21daf265c259cd7bd34f8aeb8fdf776d1afee5eda6ff062496231d23d::server:880a71f084912f7ab3dff7220bcd2ef8</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;server</span><br><span class="line">sudo curl -sfL https:&#x2F;&#x2F;docs.rancher.cn&#x2F;k3s&#x2F;k3s-install.sh | K3S_URL&#x3D;https:&#x2F;&#x2F;192.168.66.193:6443 \</span><br><span class="line">K3S_TOKEN&#x3D;K108afe2af5af0affd2d87ed7c5d44ebbec46f78f536fd4f443216dcb20a827b045::server:4526566796c57605c16915f088310c90 INSTALL_K3S_MIRROR&#x3D;cn sh - --docker</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;agent</span><br><span class="line"> sudo curl -sfL https:&#x2F;&#x2F;docs.rancher.cn&#x2F;k3s&#x2F;k3s-install.sh | K3S_URL&#x3D;https:&#x2F;&#x2F;192.168.66.193:6443 K3S_TOKEN&#x3D;K10eba551ffc2cacd2e0716a57cf916166472b96182ff7dc047cdb6c966a3454463::server:9dc30c997ca2aea4a759b9c0915a1ce3 INSTALL_K3S_MIRROR&#x3D;cn sh -s - agent --docker</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;k3s-agent.service</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#k3s卸载</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;k3s-uninstall.sh(或 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;k3s-agent-uninstall.sh )</span><br><span class="line">#强制删除和k3s相关的容器服务</span><br><span class="line">docker rm -f  &#96;docker ps -aq --filter name&#x3D;k8s_&#96;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="工具环境搭建\k3s" scheme="https://imonster.me/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-k3s/"/>
    
    
      <category term="工具环境搭建\k3s" scheme="https://imonster.me/tags/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-k3s/"/>
    
  </entry>
  
  <entry>
    <title>k8s各类yaml配置详情</title>
    <link href="https://imonster.me/2020/04/26/k8s%E5%90%84%E7%B1%BByaml%E9%85%8D%E7%BD%AE%E8%AF%A6%E6%83%85/"/>
    <id>https://imonster.me/2020/04/26/k8s%E5%90%84%E7%B1%BByaml%E9%85%8D%E7%BD%AE%E8%AF%A6%E6%83%85/</id>
    <published>2020-04-26T03:39:31.000Z</published>
    <updated>2020-07-06T06:34:11.274Z</updated>
    
    <content type="html"><![CDATA[<p>$$</p><p>$$</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span>   <span class="comment">#接口版本</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span>                 <span class="comment">#接口类型</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cango-demo</span>               <span class="comment">#Deployment名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">cango-prd</span>           <span class="comment">#命名空间</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">cango-demo</span>              <span class="comment">#标签</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span>  <span class="comment">##由于replicas为3,则整个升级,pod个数在2-4个之间</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">1</span>      <span class="comment">#滚动升级时会先启动1个pod</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">1</span> <span class="comment">#滚动升级时允许的最大Unavailable的pod个数</span></span><br><span class="line">  <span class="attr">template:</span>         </span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">cango-demo</span>  <span class="comment">#模板名称必填</span></span><br><span class="line">    <span class="attr">sepc:</span> <span class="comment">#定义容器模板，该模板可以包含多个容器</span></span><br><span class="line">      <span class="attr">containers:</span>                                                                   </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cango-demo</span>                                    <span class="comment">#镜像名称</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">swr.cn-east-2.myhuaweicloud.com/cango-prd/cango-demo:0.0.1-SNAPSHOT</span> <span class="comment">#镜像地址</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">[</span> <span class="string">"/bin/sh"</span><span class="string">,"-c","cat</span> <span class="string">/etc/config/path/to/special-key"</span> <span class="string">]</span>    <span class="comment">#启动命令</span></span><br><span class="line">          <span class="attr">args:</span> <span class="comment">#启动参数</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">'-storage.local.retention=$(STORAGE_RETENTION)'</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">'-storage.local.memory-chunks=$(STORAGE_MEMORY_CHUNKS)'</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">'-config.file=/etc/prometheus/prometheus.yml'</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">'-alertmanager.url=http://alertmanager:9093/alertmanager'</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">'-web.external-url=$(EXTERNAL_URL)'</span></span><br><span class="line">    <span class="comment">#如果command和args均没有写，那么用Docker默认的配置。</span></span><br><span class="line">    <span class="comment">#如果command写了，但args没有写，那么Docker默认的配置会被忽略而且仅仅执行.yaml文件的command（不带任何参数的）。</span></span><br><span class="line">    <span class="comment">#如果command没写，但args写了，那么Docker默认配置的ENTRYPOINT的命令行会被执行，但是调用的参数是.yaml中的args。</span></span><br><span class="line">    <span class="comment">#如果如果command和args都写了，那么Docker默认的配置被忽略，使用.yaml的配置。</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span>  <span class="comment">#如果不存在则拉取</span></span><br><span class="line">          <span class="attr">livenessProbe:</span>       <span class="comment">#表示container是否处于live状态。如果LivenessProbe失败，LivenessProbe将会通知kubelet对应的container不健康了。随后kubelet将kill掉container，并根据RestarPolicy进行进一步的操作。默认情况下LivenessProbe在第一次检测之前初始化值为Success，如果container没有提供LivenessProbe，则也认为是Success；</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/health</span> <span class="comment">#如果没有心跳检测接口就为/</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">60</span> <span class="comment">##启动后延时多久开始运行检测</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">5</span></span><br><span class="line">          <span class="attr">readinessProbe:</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/health</span> <span class="comment">#如果没有心跳检测接口就为/</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">30</span> <span class="comment">##启动后延时多久开始运行检测</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">5</span></span><br><span class="line">          <span class="attr">resources:</span>              <span class="comment">##CPU内存限制</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="number">2</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">2048Mi</span></span><br><span class="line">            <span class="attr">limits:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="number">2</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">2048Mi</span></span><br><span class="line">          <span class="attr">env:</span>                    <span class="comment">##通过环境变量的方式，直接传递pod=自定义Linux OS环境变量</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">LOCAL_KEY</span>     <span class="comment">#本地Key</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">value</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CONFIG_MAP_KEY</span>  <span class="comment">#局策略可使用configMap的配置Key，</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">configMapKeyRef:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">special-config</span>   <span class="comment">#configmap中找到name为special-config</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">special.type</span>      <span class="comment">#找到name为special-config里data下的key</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">8080</span> <span class="comment">#对service暴露端口</span></span><br><span class="line">          <span class="attr">volumeMounts:</span>     <span class="comment">#挂载volumes中定义的磁盘</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log-cache</span></span><br><span class="line">            <span class="attr">mount:</span> <span class="string">/tmp/log</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sdb</span>       <span class="comment">#普通用法，该卷跟随容器销毁，挂载一个目录</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/data/media</span>    </span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span>    <span class="comment">#直接挂载硬盘方法，如挂载下面的nfs目录到/mnt/nfs</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/mnt/nfs</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">example-volume-config</span>  <span class="comment">#高级用法第1种，将ConfigMap的log-script,backup-script分别挂载到/etc/config目录下的一个相对路径path/to/...下，如果存在同名文件，直接覆盖。</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/etc/config</span>       </span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rbd-pvc</span>                <span class="comment">#高级用法第2中，挂载PVC(PresistentVolumeClaim)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#使用volume将ConfigMap作为文件或目录直接挂载，其中每一个key-value键值对都会生成一个文件，key为文件名，value为内容，</span></span><br><span class="line">  <span class="attr">volumes:</span>  <span class="comment"># 定义磁盘给上面volumeMounts挂载</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log-cache</span></span><br><span class="line">    <span class="attr">emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sdb</span>  <span class="comment">#挂载宿主机上面的目录</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/any/path/it/will/be/replaced</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">example-volume-config</span>  <span class="comment"># 供ConfigMap文件内容到指定路径使用</span></span><br><span class="line">    <span class="attr">configMap:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">example-volume-config</span>  <span class="comment">#ConfigMap中名称</span></span><br><span class="line">      <span class="attr">items:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">log-script</span>           <span class="comment">#ConfigMap中的Key</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">path/to/log-script</span>  <span class="comment">#指定目录下的一个相对路径path/to/log-script</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">backup-script</span>        <span class="comment">#ConfigMap中的Key</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">path/to/backup-script</span>  <span class="comment">#指定目录下的一个相对路径path/to/backup-script</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span>         <span class="comment">#供挂载NFS存储类型</span></span><br><span class="line">    <span class="attr">nfs:</span></span><br><span class="line">      <span class="attr">server:</span> <span class="number">10.42</span><span class="number">.0</span><span class="number">.55</span>          <span class="comment">#NFS服务器地址</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/opt/public</span>           <span class="comment">#showmount -e 看一下路径</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rbd-pvc</span>                 <span class="comment">#挂载PVC磁盘</span></span><br><span class="line">    <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">      <span class="attr">claimName:</span> <span class="string">rbd-pvc1</span>         <span class="comment">#挂载已经申请的pvc磁盘</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Pod-yaml文件详解"><a href="#Pod-yaml文件详解" class="headerlink" title="Pod yaml文件详解"></a>Pod yaml文件详解</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yaml格式的pod定义文件完整内容：</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span>       <span class="comment">#必选，版本号，例如v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span>       <span class="comment">#必选，Pod</span></span><br><span class="line"><span class="attr">metadata:</span>       <span class="comment">#必选，元数据</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">string</span>       <span class="comment">#必选，Pod名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">string</span>    <span class="comment">#必选，Pod所属的命名空间</span></span><br><span class="line">  <span class="attr">labels:</span>      <span class="comment">#自定义标签</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span>     <span class="comment">#自定义标签名字</span></span><br><span class="line">  <span class="attr">annotations:</span>       <span class="comment">#自定义注释列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">spec:</span>         <span class="comment">#必选，Pod中容器的详细定义</span></span><br><span class="line">  <span class="attr">containers:</span>      <span class="comment">#必选，Pod中容器列表</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span>     <span class="comment">#必选，容器名称</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">string</span>    <span class="comment">#必选，容器的镜像名称</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">[Always</span> <span class="string">|</span> <span class="string">Never</span> <span class="string">|</span> <span class="string">IfNotPresent]</span> <span class="comment">#获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">[string]</span>    <span class="comment">#容器的启动命令列表，如不指定，使用打包时使用的启动命令</span></span><br><span class="line">    <span class="attr">args:</span> <span class="string">[string]</span>     <span class="comment">#容器的启动命令参数列表</span></span><br><span class="line">    <span class="attr">workingDir:</span> <span class="string">string</span>     <span class="comment">#容器的工作目录</span></span><br><span class="line">    <span class="attr">volumeMounts:</span>    <span class="comment">#挂载到容器内部的存储卷配置</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span>     <span class="comment">#引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">string</span>    <span class="comment">#存储卷在容器内mount的绝对路径，应少于512字符</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="string">boolean</span>    <span class="comment">#是否为只读模式</span></span><br><span class="line">    <span class="attr">ports:</span>       <span class="comment">#需要暴露的端口库号列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span>     <span class="comment">#端口号名称</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="string">int</span>   <span class="comment">#容器需要监听的端口号</span></span><br><span class="line">      <span class="attr">hostPort:</span> <span class="string">int</span>    <span class="comment">#容器所在主机需要监听的端口号，默认与Container相同</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">string</span>     <span class="comment">#端口协议，支持TCP和UDP，默认TCP</span></span><br><span class="line">    <span class="attr">env:</span>       <span class="comment">#容器运行前需设置的环境变量列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span>     <span class="comment">#环境变量名称</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">string</span>    <span class="comment">#环境变量的值</span></span><br><span class="line">    <span class="attr">resources:</span>       <span class="comment">#资源限制和请求的设置</span></span><br><span class="line">      <span class="attr">limits:</span>      <span class="comment">#资源限制的设置</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">string</span>    <span class="comment">#Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">string</span>     <span class="comment">#内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span></span><br><span class="line">      <span class="attr">requests:</span>      <span class="comment">#资源请求的设置</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">string</span>    <span class="comment">#Cpu请求，容器启动的初始可用数量</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">string</span>     <span class="comment">#内存清楚，容器启动的初始可用数量</span></span><br><span class="line">    <span class="attr">livenessProbe:</span>     <span class="comment">#对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可</span></span><br><span class="line">      <span class="attr">exec:</span>      <span class="comment">#对Pod容器内检查方式设置为exec方式</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">[string]</span>  <span class="comment">#exec方式需要制定的命令或脚本</span></span><br><span class="line">      <span class="attr">httpGet:</span>       <span class="comment">#对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">port:</span> <span class="string">number</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">scheme:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">HttpHeaders:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">tcpSocket:</span>     <span class="comment">#对Pod内个容器健康检查方式设置为tcpSocket方式</span></span><br><span class="line">         <span class="attr">port:</span> <span class="string">number</span></span><br><span class="line">       <span class="attr">initialDelaySeconds:</span> <span class="number">0</span>  <span class="comment">#容器启动完成后首次探测的时间，单位为秒</span></span><br><span class="line">       <span class="attr">timeoutSeconds:</span> <span class="number">0</span>   <span class="comment">#对容器健康检查探测等待响应的超时时间，单位秒，默认1秒</span></span><br><span class="line">       <span class="attr">periodSeconds:</span> <span class="number">0</span>    <span class="comment">#对容器监控检查的定期探测时间设置，单位秒，默认10秒一次</span></span><br><span class="line">       <span class="attr">successThreshold:</span> <span class="number">0</span></span><br><span class="line">       <span class="attr">failureThreshold:</span> <span class="number">0</span></span><br><span class="line">       <span class="attr">securityContext:</span></span><br><span class="line">         <span class="string">privileged:false</span></span><br><span class="line">    <span class="attr">restartPolicy:</span> <span class="string">[Always</span> <span class="string">|</span> <span class="string">Never</span> <span class="string">|</span> <span class="string">OnFailure]#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod</span></span><br><span class="line">    <span class="attr">nodeSelector:</span> <span class="string">obeject</span>  <span class="comment">#设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定</span></span><br><span class="line">    <span class="attr">imagePullSecrets:</span>    <span class="comment">#Pull镜像时使用的secret名称，以key：secretkey格式指定</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line">    <span class="string">hostNetwork:false</span>      <span class="comment">#是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span></span><br><span class="line">    <span class="attr">volumes:</span>       <span class="comment">#在该pod上定义共享存储卷列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span>     <span class="comment">#共享存储卷名称 （volumes类型有很多种）</span></span><br><span class="line">      <span class="attr">emptyDir:</span> <span class="string">&#123;&#125;</span>     <span class="comment">#类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span></span><br><span class="line">      <span class="attr">hostPath:</span> <span class="string">string</span>     <span class="comment">#类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">string</span>     <span class="comment">#Pod所在宿主机的目录，将被用于同期中mount的目录</span></span><br><span class="line">      <span class="attr">secret:</span>      <span class="comment">#类型为secret的存储卷，挂载集群与定义的secre对象到容器内部</span></span><br><span class="line">        <span class="attr">scretname:</span> <span class="string">string</span>  </span><br><span class="line">        <span class="attr">items:</span>     </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">configMap:</span>     <span class="comment">#类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">items:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure><h3 id="Service-yaml文件详解"><a href="#Service-yaml文件详解" class="headerlink" title="Service yaml文件详解"></a>Service yaml文件详解</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">matadata:</span>                                <span class="comment">#元数据</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">string</span>                           <span class="comment">#service的名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">string</span>                      <span class="comment">#命名空间  </span></span><br><span class="line">  <span class="attr">labels:</span>                                <span class="comment">#自定义标签属性列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line">  <span class="attr">annotations:</span>                           <span class="comment">#自定义注解属性列表  </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">spec:</span>                                    <span class="comment">#详细描述</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="string">[]</span>                           <span class="comment">#label selector配置，将选择具有label标签的Pod作为管理 </span></span><br><span class="line">                                         <span class="comment">#范围</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">string</span>                           <span class="comment">#service的类型，指定service的访问方式，默认为 </span></span><br><span class="line">                                         <span class="comment">#clusterIp</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">string</span>                      <span class="comment">#虚拟服务地址      </span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">string</span>                <span class="comment">#是否支持session</span></span><br><span class="line">  <span class="attr">ports:</span>                                 <span class="comment">#service需要暴露的端口列表</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span>                         <span class="comment">#端口名称</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">string</span>                     <span class="comment">#端口协议，支持TCP和UDP，默认TCP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">int</span>                            <span class="comment">#服务监听的端口号</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="string">int</span>                      <span class="comment">#需要转发到后端Pod的端口号</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="string">int</span>                        <span class="comment">#当type = NodePort时，指定映射到物理机的端口号</span></span><br><span class="line">  <span class="attr">status:</span>                                <span class="comment">#当spce.type=LoadBalancer时，设置外部负载均衡器的地址</span></span><br><span class="line">    <span class="attr">loadBalancer:</span>                        <span class="comment">#外部负载均衡器    </span></span><br><span class="line">      <span class="attr">ingress:</span>                           <span class="comment">#外部负载均衡器 </span></span><br><span class="line">        <span class="attr">ip:</span> <span class="string">string</span>                       <span class="comment">#外部负载均衡器的Ip地址值</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">string</span>                 <span class="comment">#外部负载均衡器的主机名</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20171208160333046?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQTYzMjE4OTAwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="详情"></p><p>目前kubernetes提供了两种负载分发策略：RoundRobin和SessionAffinity</p><p>RoundRobin：轮询模式，即轮询将请求转发到后端的各个Pod上</p><p>SessionAffinity：基于客户端IP地址进行会话保持的模式，第一次客户端访问后端某个Pod，之后的请求都转发到这个Pod上</p><p>默认是RoundRobin模式</p><p>在某些场景中，开发人员希望自己控制负载均衡的策略，不使用Service提供的默认负载，kubernetes通过Headless Service的概念来实现。不给Service设置ClusterIP（无入口IP地址）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">  clusterIP: None</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br></pre></td></tr></table></figure><p>有时候，一个容器应用提供多个端口服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: webapp</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 8080</span><br><span class="line">    targetPort: 8080</span><br><span class="line">    name: web</span><br><span class="line">  - port: 8005</span><br><span class="line">    targetPort: 8005</span><br><span class="line">    name: management</span><br><span class="line">  selector:</span><br><span class="line">    app: webapp</span><br></pre></td></tr></table></figure><p>为不同的应用分配各自的端口。</p><p>另一个例子是两个端口使用了不同的4层协议，即TCP或UDP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-dns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-dns</span><br><span class="line">    kubernetes.io&#x2F;cluster-service: &quot;true&quot;</span><br><span class="line">    kubernetes.io&#x2F;name: &quot;KubeDNS&quot;</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kube-dns</span><br><span class="line">  clusterIP: 169.169.0.100</span><br><span class="line">  ports:</span><br><span class="line">  - name: dns</span><br><span class="line">    port: 53</span><br><span class="line">    protocol: UDP</span><br><span class="line">  - name: dns-tcp</span><br><span class="line">    port: 53</span><br><span class="line">    protocol: TCP</span><br></pre></td></tr></table></figure><p>集群外部访问Pod或Service<br>为了让外部客户端可以访问这些服务，可以将Pod或者Service的端口号映射到宿主主机，使得客户端应用能够通过物理机访问容器应用。</p><p>将容器应用的端口号映射到物理机<br>通过设置容器级别的hostPort，将容器应用的端口号映射到物理机上：<br>pod-hostport.yaml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: webapp</span><br><span class="line">  labels:</span><br><span class="line">    app: webapp</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: webapp</span><br><span class="line">    image: tomcat</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 8080</span><br><span class="line">      hostPort:8081</span><br></pre></td></tr></table></figure><p>创建这个Pod：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f pod-hostnetwork.yaml</span><br></pre></td></tr></table></figure><p>通过物理机的IP地址和8080端口访问Pod的容器服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 10.0.11.151:8080</span><br></pre></td></tr></table></figure><p><strong>将Service的端口号映射到物理机</strong></p><p>通过设置nodePort映射到物理机，同时设置Service的类型为NodePort：</p><p>webapp-svc-nodeport.yaml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: webapp</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - port: 8080</span><br><span class="line">    targetPort: 8080</span><br><span class="line">    nodePort: 8081</span><br><span class="line">  selector:</span><br><span class="line">    app: webapp</span><br></pre></td></tr></table></figure><p>创建这个Service：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f webapp-svc-nodeport.yaml</span><br></pre></td></tr></table></figure><p>通过物理机的IP和端口访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 10.0.11.151:8081</span><br></pre></td></tr></table></figure><h3 id="ingress-yaml详解"><a href="#ingress-yaml详解" class="headerlink" title="ingress.yaml详解"></a>ingress.yaml详解</h3><p>通常情况下，service和pod仅可在集群内部网络中通过IP地址访问。所有到达边界路由器的流量或被丢弃或被转发到其他地方。从概念上讲，可能像下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">internet|------------</span><br><span class="line">[ Services ]</span><br></pre></td></tr></table></figure><p>Ingress是授权入站连接到达集群服务的规则集合。</p><pre><code>internet    | [ Ingress ]   --|-----|--   [ Services ]</code></pre><p>Ingress是授权入站连接到达集群服务的规则集合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> internet|</span><br><span class="line">[ Ingress ]</span><br><span class="line">--|-----|--</span><br><span class="line">[ Services ]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;$$&lt;/p&gt;
&lt;p&gt;$$&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;extensions/v1beta1&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;#接口版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;Deployment&lt;/span&gt;                 &lt;span class=&quot;comment&quot;&gt;#接口类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;cango-demo&lt;/span&gt;               &lt;span class=&quot;comment&quot;&gt;#Deployment名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;namespace:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;cango-prd&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;#命名空间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;app:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;cango-demo&lt;/span&gt;              &lt;span class=&quot;comment&quot;&gt;#标签&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;replicas:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;strategy:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;rollingUpdate:&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;##由于replicas为3,则整个升级,pod个数在2-4个之间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;maxSurge:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;      &lt;span class=&quot;comment&quot;&gt;#滚动升级时会先启动1个pod&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;maxUnavailable:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#滚动升级时允许的最大Unavailable的pod个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;template:&lt;/span&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;app:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;cango-demo&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;#模板名称必填&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;sepc:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#定义容器模板，该模板可以包含多个容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;containers:&lt;/span&gt;                                                                   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;cango-demo&lt;/span&gt;                                    &lt;span class=&quot;comment&quot;&gt;#镜像名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;image:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;swr.cn-east-2.myhuaweicloud.com/cango-prd/cango-demo:0.0.1-SNAPSHOT&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#镜像地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;command:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;,&quot;-c&quot;,&quot;cat&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/etc/config/path/to/special-key&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;#启动命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;args:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#启动参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;-storage.local.retention=$(STORAGE_RETENTION)&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;-storage.local.memory-chunks=$(STORAGE_MEMORY_CHUNKS)&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;-config.file=/etc/prometheus/prometheus.yml&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;-alertmanager.url=http://alertmanager:9093/alertmanager&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;-web.external-url=$(EXTERNAL_URL)&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#如果command和args均没有写，那么用Docker默认的配置。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#如果command写了，但args没有写，那么Docker默认的配置会被忽略而且仅仅执行.yaml文件的command（不带任何参数的）。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#如果command没写，但args写了，那么Docker默认配置的ENTRYPOINT的命令行会被执行，但是调用的参数是.yaml中的args。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#如果如果command和args都写了，那么Docker默认的配置被忽略，使用.yaml的配置。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;imagePullPolicy:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;IfNotPresent&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;#如果不存在则拉取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;livenessProbe:&lt;/span&gt;       &lt;span class=&quot;comment&quot;&gt;#表示container是否处于live状态。如果LivenessProbe失败，LivenessProbe将会通知kubelet对应的container不健康了。随后kubelet将kill掉container，并根据RestarPolicy进行进一步的操作。默认情况下LivenessProbe在第一次检测之前初始化值为Success，如果container没有提供LivenessProbe，则也认为是Success；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;httpGet:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;attr&quot;&gt;path:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/health&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#如果没有心跳检测接口就为/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;attr&quot;&gt;port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;attr&quot;&gt;scheme:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;HTTP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;initialDelaySeconds:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;##启动后延时多久开始运行检测&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;timeoutSeconds:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;successThreshold:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;failureThreshold:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;readinessProbe:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;httpGet:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;attr&quot;&gt;path:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/health&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#如果没有心跳检测接口就为/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;attr&quot;&gt;port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;attr&quot;&gt;scheme:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;HTTP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;initialDelaySeconds:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;##启动后延时多久开始运行检测&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;timeoutSeconds:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;successThreshold:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;failureThreshold:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;resources:&lt;/span&gt;              &lt;span class=&quot;comment&quot;&gt;##CPU内存限制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;requests:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;attr&quot;&gt;cpu:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;attr&quot;&gt;memory:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;2048Mi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;limits:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;attr&quot;&gt;cpu:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;attr&quot;&gt;memory:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;2048Mi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;env:&lt;/span&gt;                    &lt;span class=&quot;comment&quot;&gt;##通过环境变量的方式，直接传递pod=自定义Linux OS环境变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;LOCAL_KEY&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;#本地Key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;attr&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;CONFIG_MAP_KEY&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;#局策略可使用configMap的配置Key，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;attr&quot;&gt;valueFrom:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attr&quot;&gt;configMapKeyRef:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;special-config&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;#configmap中找到name为special-config&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &lt;span class=&quot;attr&quot;&gt;key:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;special.type&lt;/span&gt;      &lt;span class=&quot;comment&quot;&gt;#找到name为special-config里data下的key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;http&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;attr&quot;&gt;containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#对service暴露端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;volumeMounts:&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;#挂载volumes中定义的磁盘&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;log-cache&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;mount:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/tmp/log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;sdb&lt;/span&gt;       &lt;span class=&quot;comment&quot;&gt;#普通用法，该卷跟随容器销毁，挂载一个目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;mountPath:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/data/media&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;nfs-client-root&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;#直接挂载硬盘方法，如挂载下面的nfs目录到/mnt/nfs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;mountPath:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/mnt/nfs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;example-volume-config&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;#高级用法第1种，将ConfigMap的log-script,backup-script分别挂载到/etc/config目录下的一个相对路径path/to/...下，如果存在同名文件，直接覆盖。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;mountPath:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/etc/config&lt;/span&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;rbd-pvc&lt;/span&gt;                &lt;span class=&quot;comment&quot;&gt;#高级用法第2中，挂载PVC(PresistentVolumeClaim)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#使用volume将ConfigMap作为文件或目录直接挂载，其中每一个key-value键值对都会生成一个文件，key为文件名，value为内容，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;volumes:&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 定义磁盘给上面volumeMounts挂载&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;log-cache&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;emptyDir:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;sdb&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;#挂载宿主机上面的目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;hostPath:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;path:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/any/path/it/will/be/replaced&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;example-volume-config&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 供ConfigMap文件内容到指定路径使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;configMap:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;example-volume-config&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;#ConfigMap中名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;items:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;key:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;log-script&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;#ConfigMap中的Key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;path:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;path/to/log-script&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;#指定目录下的一个相对路径path/to/log-script&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;key:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;backup-script&lt;/span&gt;        &lt;span class=&quot;comment&quot;&gt;#ConfigMap中的Key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;path:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;path/to/backup-script&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;#指定目录下的一个相对路径path/to/backup-script&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;nfs-client-root&lt;/span&gt;         &lt;span class=&quot;comment&quot;&gt;#供挂载NFS存储类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;nfs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;server:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.42&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.55&lt;/span&gt;          &lt;span class=&quot;comment&quot;&gt;#NFS服务器地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;path:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/opt/public&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;#showmount -e 看一下路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;rbd-pvc&lt;/span&gt;                 &lt;span class=&quot;comment&quot;&gt;#挂载PVC磁盘&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;persistentVolumeClaim:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;claimName:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;rbd-pvc1&lt;/span&gt;         &lt;span class=&quot;comment&quot;&gt;#挂载已经申请的pvc磁盘&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="工具环境搭建\K8S" scheme="https://imonster.me/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-K8S/"/>
    
    
      <category term="工具环境搭建\K8S" scheme="https://imonster.me/tags/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-K8S/"/>
    
  </entry>
  
  <entry>
    <title>go数据类型</title>
    <link href="https://imonster.me/2020/04/02/go%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://imonster.me/2020/04/02/go%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-04-02T07:09:55.000Z</published>
    <updated>2020-07-06T06:34:10.669Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、基本数据类型"><a href="#1、基本数据类型" class="headerlink" title="1、基本数据类型"></a>1、基本数据类型</h4><p><strong>整型</strong>：</p><p>int8、int16、int32和int64</p><p>uint8、uint16、uint32和uint64</p><a id="more"></a><p>uintptr</p><p><strong>浮点型</strong>：</p><p>float32和float64</p><p><strong>复数</strong>：</p><p>complex64和complex128</p><p><strong>布尔型</strong>：</p><p>bool(true和false)</p><p><strong>字符串</strong>：</p><p>string</p><p><strong>常量</strong>：</p><h5 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* &#x2F; % &lt;&lt; &gt;&gt; &amp; &amp;^</span><br><span class="line">+ - | ^</span><br><span class="line">&#x3D;&#x3D; !&#x3D;  &lt;  &lt;&#x3D;  &gt;  &gt;&#x3D;</span><br><span class="line">&amp;&amp;</span><br><span class="line">||</span><br></pre></td></tr></table></figure><h4 id="2、复合数据类型"><a href="#2、复合数据类型" class="headerlink" title="2、复合数据类型"></a>2、复合数据类型</h4><p><strong>数组</strong>（固定长度元素序列）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a :&#x3D; [2]int&#123;1, 2&#125;</span><br></pre></td></tr></table></figure><p><strong>slice</strong>（变长的序列）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">months :&#x3D; [...]string&#123;1: &quot;January&quot;, &#x2F;* ... *&#x2F;, 12: &quot;December&quot;&#125;</span><br></pre></td></tr></table></figure><p>内置的append函数用于向slice追加元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var runes []rune</span><br><span class="line">for _, r :&#x3D; range &quot;Hello, 世界&quot; &#123;</span><br><span class="line">runes &#x3D; append(runes, r)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(&quot;%q\n&quot;, runes) &#x2F;&#x2F; &quot;[&#39;H&#39; &#39;e&#39; &#39;l&#39; &#39;l&#39; &#39;o&#39; &#39;,&#39; &#39; &#39; &#39;世&#39; &#39;界&#39;]&quot;</span><br></pre></td></tr></table></figure><p><strong>map</strong></p><p>它是一个无序的key/value对的集合</p><p>内置的make函数可以创建一个map</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ages :&#x3D; make(map[string]int) &#x2F;&#x2F; mapping from strings to ints</span><br></pre></td></tr></table></figure><p><strong>结构体</strong></p><p>结构体是一种聚合的数据类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID <span class="keyword">int</span></span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Address <span class="keyword">string</span></span><br><span class="line">    DoB time.Time</span><br><span class="line">    Position <span class="keyword">string</span></span><br><span class="line">    Salary <span class="keyword">int</span></span><br><span class="line">    ManagerID <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dilbert Employee</span><br></pre></td></tr></table></figure><p><strong>JSON</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Movie <span class="keyword">struct</span> &#123;</span><br><span class="line">Title <span class="keyword">string</span></span><br><span class="line">    Year <span class="keyword">int</span> <span class="string">`json:"released"`</span></span><br><span class="line">    Color <span class="keyword">bool</span> <span class="string">`json:"color,omitempty"`</span></span><br><span class="line">    Actors []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> movies = []Movie&#123;</span><br><span class="line">    &#123;Title: <span class="string">"Casablanca"</span>, Year: <span class="number">1942</span>, Color: <span class="literal">false</span>,</span><br><span class="line">    Actors: []<span class="keyword">string</span>&#123;<span class="string">"Humphrey Bogart"</span>, <span class="string">"Ingrid Bergman"</span>&#125;&#125;,</span><br><span class="line">    &#123;Title: <span class="string">"Cool Hand Luke"</span>, Year: <span class="number">1967</span>, Color: <span class="literal">true</span>,</span><br><span class="line">    Actors: []<span class="keyword">string</span>&#123;<span class="string">"Paul Newman"</span>&#125;&#125;,</span><br><span class="line">    &#123;Title: <span class="string">"Bullitt"</span>, Year: <span class="number">1968</span>, Color: <span class="literal">true</span>,</span><br><span class="line">    Actors: []<span class="keyword">string</span>&#123;<span class="string">"Steve McQueen"</span>, <span class="string">"Jacqueline Bisset"</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体-&gt;json</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data, err := json.Marshal(movies)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"JSON marshaling failed: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, data)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;Title&quot;:&quot;Casablanca&quot;,&quot;released&quot;:1942,&quot;Actors&quot;:[&quot;Humphrey Bogart&quot;,&quot;Ingr</span><br><span class="line">id Bergman&quot;]&#125;,&#123;&quot;Title&quot;:&quot;Cool Hand Luke&quot;,&quot;released&quot;:1967,&quot;color&quot;:true,&quot;Ac</span><br><span class="line">tors&quot;:[&quot;Paul Newman&quot;]&#125;,&#123;&quot;Title&quot;:&quot;Bullitt&quot;,&quot;released&quot;:1968,&quot;color&quot;:true,&quot;</span><br><span class="line">Actors&quot;:[&quot;Steve McQueen&quot;,&quot;Jacqueline Bisset&quot;]&#125;]</span><br></pre></td></tr></table></figure><p>结构体-&gt;json(格式化输出)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data, err := json.MarshalIndent(movies, <span class="string">""</span>, <span class="string">" "</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"JSON marshaling failed: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, data)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Title&quot;: &quot;Casablanca&quot;,</span><br><span class="line">        &quot;released&quot;: 1942,</span><br><span class="line">        &quot;Actors&quot;: [</span><br><span class="line">            &quot;Humphrey Bogart&quot;,</span><br><span class="line">            &quot;Ingrid Bergman&quot;</span><br><span class="line">    ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Title&quot;: &quot;Cool Hand Luke&quot;,</span><br><span class="line">        &quot;released&quot;: 1967,</span><br><span class="line">        &quot;color&quot;: true,</span><br><span class="line">            &quot;Actors&quot;: [</span><br><span class="line">            &quot;Paul Newman&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Title&quot;: &quot;Bullitt&quot;,</span><br><span class="line">        &quot;released&quot;: 1968,</span><br><span class="line">        &quot;color&quot;: true,</span><br><span class="line">        &quot;Actors&quot;: [</span><br><span class="line">            &quot;Steve McQueen&quot;,</span><br><span class="line">            &quot;Jacqueline Bisset&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="3、引用类型"><a href="#3、引用类型" class="headerlink" title="3、引用类型"></a>3、引用类型</h4><p>指针（§2.3.2）、</p><p>切片 （§4.2)）</p><p>字典（§4.3）、</p><p>函数（§5）</p><p>通道（§8），</p><h4 id="4、接口类型"><a href="#4、接口类型" class="headerlink" title="4、接口类型"></a>4、接口类型</h4>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1、基本数据类型&quot;&gt;&lt;a href=&quot;#1、基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;1、基本数据类型&quot;&gt;&lt;/a&gt;1、基本数据类型&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;整型&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;int8、int16、int32和int64&lt;/p&gt;
&lt;p&gt;uint8、uint16、uint32和uint64&lt;/p&gt;
    
    </summary>
    
    
      <category term="go" scheme="https://imonster.me/categories/go/"/>
    
    
      <category term="go" scheme="https://imonster.me/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go基本命令操作</title>
    <link href="https://imonster.me/2020/04/01/go%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/"/>
    <id>https://imonster.me/2020/04/01/go%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/</id>
    <published>2020-04-01T02:39:20.000Z</published>
    <updated>2020-07-06T06:34:10.659Z</updated>
    
    <content type="html"><![CDATA[<p>Go是一门类似C的编译型语言，但是它的编译速度非常快。这门语言的关键字总共也就二十五个，比英文字母还少一个，这对于我们的学习来说就简单了很多。先让我们看一眼这些关键字都长什么样：</p><p>下面列举了 Go 代码中会使用到的 25 个关键字或保留字：</p><table><thead><tr><th>break</th><th>default</th><th>func</th><th>interface</th><th>select</th></tr></thead><tbody><tr><td>case</td><td>defer</td><td>go</td><td>map</td><td>struct</td></tr><tr><td>chan</td><td>else</td><td>goto</td><td>package</td><td>switch</td></tr><tr><td>const</td><td>fallthrough</td><td>if</td><td>range</td><td>type</td></tr><tr><td>continue</td><td>for</td><td>import</td><td>return</td><td>var</td></tr></tbody></table><p><strong>Go程序设计的一些规则</strong></p><a id="more"></a><p>Go之所以会那么简洁，是因为它有一些默认的行为：</p><ul><li>大写字母开头的变量是可导出的，也就是其它包可以读取的，是公有变量；小写字母开头的就是不可导出的，是私有变量。</li><li>大写字母开头的函数也是一样，相当于class中的带public关键词的公有函数；小写字母开头的就是有private关键词的私有函数。</li></ul><h3 id="1-变量、常量、Go内置类型"><a href="#1-变量、常量、Go内置类型" class="headerlink" title="1. 变量、常量、Go内置类型#"></a>1. 变量、常量、Go内置类型<a href="https://www.cnblogs.com/rickiyang/p/11074184.html#3713231826" target="_blank" rel="noopener">#</a></h3><h4 id="1-1-变量"><a href="#1-1-变量" class="headerlink" title="1.1 变量#"></a>1.1 变量<a href="https://www.cnblogs.com/rickiyang/p/11074184.html#1101867992" target="_blank" rel="noopener">#</a></h4><p>Go语言里面定义变量有多种方式。</p><p>使用<code>var</code>关键字是Go最基本的定义变量方式，与C语言不同的是Go把变量类型放在变量名后面：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个名称为“valName”，类型为"type"的变量</span></span><br><span class="line"><span class="keyword">var</span> valName <span class="keyword">type</span></span><br></pre></td></tr></table></figure><p>定义多个变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义三个类型都是“type”的变量</span></span><br><span class="line"><span class="keyword">var</span> vname1, vname2, vname3 <span class="keyword">type</span></span><br></pre></td></tr></table></figure><p>定义变量并初始化值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化“vName”的变量为“value”值，类型是“type”</span></span><br><span class="line"><span class="keyword">var</span> vName <span class="keyword">type</span> = value</span><br></pre></td></tr></table></figure><p>同时初始化多个变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义三个类型都是"type"的变量,并且分别初始化为相应的值</span></span><br><span class="line"><span class="comment">    vname1为v1，vname2为v2，vname3为v3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> vname1, vname2, vname3 <span class="keyword">type</span>= v1, v2, v3</span><br></pre></td></tr></table></figure><p>你是不是觉得上面这样的定义有点繁琐？没关系，因为Go语言的设计者也发现了，有一种写法可以让它变得简单一点。我们可以直接忽略类型声明，那么上面的代码变成这样了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义三个变量，它们分别初始化为相应的值</span></span><br><span class="line"><span class="comment">    vname1为v1，vname2为v2，vname3为v3</span></span><br><span class="line"><span class="comment">    然后Go会根据其相应值的类型来帮你初始化它们</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> vname1, vname2, vname3 = v1, v2, v3</span><br></pre></td></tr></table></figure><p>你觉得上面的还是有些繁琐？好吧，我也觉得。让我们继续简化：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义三个变量，它们分别初始化为相应的值</span></span><br><span class="line"><span class="comment">    vname1为v1，vname2为v2，vname3为v3</span></span><br><span class="line"><span class="comment">    编译器会根据初始化的值自动推导出相应的类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">vname1, vname2, vname3 := v1, v2, v3</span><br></pre></td></tr></table></figure><p><code>:=</code>这个符号直接取代了<code>var</code>和<code>type</code>,这种形式叫做简短声明。不过它有一个限制，<strong>那就是它只能用在函数内部</strong>；在函数外部使用则会无法编译通过，所以一般用<code>var</code>方式来定义全局变量。</p><p><code>_</code>（下划线）是个特殊的变量名，任何赋予它的值都会被丢弃。在这个例子中，我们将值<code>2</code>赋予<code>b</code>，并同时丢弃<code>1</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_, b := <span class="number">1</span>, <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>Go对于已声明但未使用的变量会在编译阶段报错</strong>，比如下面的代码就会产生一个错误：声明了<code>i</code>但未使用:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-常量"><a href="#1-2-常量" class="headerlink" title="1.2 常量#"></a>1.2 常量<a href="https://www.cnblogs.com/rickiyang/p/11074184.html#2639290492" target="_blank" rel="noopener">#</a></h4><p>所谓常量，也就是在程序编译阶段就确定下来的值，而程序在运行时无法改变该值。在Go程序中，常量可定义为数值、布尔值或字符串等类型。</p><p>它的语法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> constantName = value</span><br><span class="line"><span class="comment">//如果需要，也可以明确指定常量的类型：</span></span><br><span class="line"><span class="keyword">const</span> Pi <span class="keyword">float32</span> = <span class="number">3.1415926</span></span><br></pre></td></tr></table></figure><p>下面是一些常量声明的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415926</span></span><br><span class="line"><span class="keyword">const</span> MaxThread = <span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> Prefix = <span class="string">"so_"</span></span><br></pre></td></tr></table></figure><h4 id="1-3-内置基础类型"><a href="#1-3-内置基础类型" class="headerlink" title="1.3 内置基础类型#"></a>1.3 内置基础类型<a href="https://www.cnblogs.com/rickiyang/p/11074184.html#3654446107" target="_blank" rel="noopener">#</a></h4><p>Go 语言按类别有以下几种数据类型：</p><ul><li>布尔型 –&gt; 在Go中，布尔值的类型为<code>bool</code>,值只可以是常量 true 或者 false。一个简单的例子：var b bool = true；</li><li>整数型 –&gt; 整型 int 和浮点型 float，Go 语言支持整型和浮点型数字，并且原生支持复数，其中位的运算采用补码；</li><li>字符串 –&gt; 字符串就是一串固定长度的字符连接起来的字符序列。Go的字符串是由单个字节连接起来的。Go语言的字符串的字节使用UTF-8编码标识Unicode文本；</li><li>派生型 –&gt;<ul><li>(a) 指针类型（Pointer）</li><li>(b) 数组类型</li><li>© 结构化类型(struct)</li><li>(d) 联合体类型 (union)</li><li>(e) 函数类型</li><li>(f ) 切片类型</li><li>(g) 接口类型（interface）</li><li>(h) Map 类型</li><li>(i) Channel 类型</li></ul></li></ul><p><strong>Boolean</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示例代码</span></span><br><span class="line"><span class="keyword">var</span> isActive <span class="keyword">bool</span>  <span class="comment">// 全局变量声明</span></span><br><span class="line"><span class="keyword">var</span> enabled, disabled = <span class="literal">true</span>, <span class="literal">false</span>  <span class="comment">// 忽略类型的声明</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> available <span class="keyword">bool</span>  <span class="comment">// 一般声明</span></span><br><span class="line">    valid := <span class="literal">false</span>      <span class="comment">// 简短声明</span></span><br><span class="line">    available = <span class="literal">true</span>    <span class="comment">// 赋值操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数值类型</strong></p><p>整数类型有无符号和带符号两种。Go同时支持<code>int</code>和<code>uint</code>，这两种类型的长度相同，但具体长度取决于不同编译器的实现。Go里面也有直接定义好位数的类型：<code>rune</code>, <code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code>和<code>byte</code>, <code>uint8</code>, <code>uint16</code>, <code>uint32</code>, <code>uint64</code>。其中<code>rune</code>是<code>int32</code>的别称，<code>byte</code>是<code>uint8</code>的别称。</p><blockquote><p>需要注意的一点是，这些类型的变量之间不允许互相赋值或操作，不然会在编译时引起编译器报错。</p><p>如下的代码会产生错误：invalid operation: a + b (mismatched types int8 and int32)</p><blockquote><p>var a int8</p><p>var b int32</p><p>c:=a + b</p></blockquote><p>另外，尽管int的长度是32 bit, 但int 与 int32并不可以互用。</p></blockquote><p>浮点数的类型有<code>float32</code>和<code>float64</code>两种（没有<code>float</code>类型），默认是<code>float64</code>。</p><p>这就是全部吗？No！Go还支持复数。它的默认类型是<code>complex128</code>（64位实数+64位虚数）。如果需要小一些的，也有<code>complex64</code>(32位实数+32位虚数)。复数的形式为<code>RE + IMi</code>，其中<code>RE</code>是实数部分，<code>IM</code>是虚数部分，而最后的<code>i</code>是虚数单位。下面是一个使用复数的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c <span class="keyword">complex64</span> = <span class="number">5</span>+<span class="number">5i</span></span><br><span class="line"><span class="comment">//output: (5+5i)</span></span><br><span class="line">fmt.Printf(<span class="string">"Value is: %v"</span>, c)</span><br></pre></td></tr></table></figure><p><strong>字符串</strong></p><p>Go中的字符串都是采用<code>UTF-8</code>字符集编码,字符串是用一对双引号（<code>&quot;&quot;</code>）或反引号（``）括起来定义，它的类型是 <code>string</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(a,b <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   str := <span class="string">"hello world"</span></span><br><span class="line">   m := <span class="string">"haha"</span></span><br><span class="line">   result := str + m</span><br><span class="line">   <span class="built_in">println</span>(result)</span><br><span class="line">   multStr := <span class="string">`hello</span></span><br><span class="line"><span class="string">         world`</span></span><br><span class="line">   <span class="built_in">println</span>(multStr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在Go中字符串是不可变的，例如下面的代码编译时会报错：cannot assign to s[0]</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span> = <span class="string">"hello"</span></span><br><span class="line">s[<span class="number">0</span>] = <span class="string">'k'</span></span><br></pre></td></tr></table></figure><p>如果你想要修改一个字符串怎么办呢：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">"hello"</span></span><br><span class="line">c := []<span class="keyword">byte</span>(s)</span><br><span class="line">c[<span class="number">0</span>] = <span class="string">'c'</span></span><br><span class="line">s1 := <span class="keyword">string</span>(c)</span><br><span class="line"><span class="built_in">println</span>(s1)</span><br></pre></td></tr></table></figure><p>Go中可以使用 + 操作符来连接两个字符串：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str := <span class="string">"hello world"</span></span><br><span class="line">m := <span class="string">"haha"</span></span><br><span class="line">result := str + m</span><br><span class="line"><span class="built_in">println</span>(result)</span><br></pre></td></tr></table></figure><p>如果要声明一个多行的字符串怎么办？可以通过`` 来声明：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">multStr := <span class="string">`hello</span></span><br><span class="line"><span class="string">         world`</span><span class="keyword">go</span></span><br><span class="line"><span class="built_in">println</span>(multStr)</span><br></pre></td></tr></table></figure><p>括起的字符串为Raw字符串，即字符串在代码中的形式就是打印时的形式，它没有字符转义，换行也将原样输出。例如本例中会输出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">    world</span><br></pre></td></tr></table></figure><p><strong>错误类型</strong></p><p>Go内置有一个<code>error</code>类型，专门用来处理错误信息，Go的<code>package</code>里面还专门有一个包<code>errors</code>来处理错误：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">error</span><span class="params">()</span></span>  &#123;</span><br><span class="line">   e := errors.New(<span class="string">"this is a error demo"</span>)</span><br><span class="line">   <span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="built_in">println</span>(e)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-iota枚举"><a href="#1-4-iota枚举" class="headerlink" title="1.4 iota枚举#"></a>1.4 iota枚举<a href="https://www.cnblogs.com/rickiyang/p/11074184.html#1181532062" target="_blank" rel="noopener">#</a></h4><p>这个关键字用来声明<code>enum</code>的时候采用，它默认开始值是0，const中每增加一行加1：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">x = <span class="literal">iota</span> <span class="comment">// x == 0</span></span><br><span class="line">y</span><br><span class="line">z</span><br><span class="line">w </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">h, i, j = <span class="literal">iota</span>, <span class="literal">iota</span>, <span class="literal">iota</span> <span class="comment">//h=0,i=0,j=0 iota在同一行值相同</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">l       = <span class="literal">iota</span> <span class="comment">//a=0</span></span><br><span class="line">m       = <span class="string">"B"</span></span><br><span class="line">n       = <span class="literal">iota</span>             <span class="comment">//2</span></span><br><span class="line">o, p, q = <span class="literal">iota</span>, <span class="literal">iota</span>, <span class="literal">iota</span> <span class="comment">//3,3,3</span></span><br><span class="line">r       = <span class="literal">iota</span>             <span class="comment">//4</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="built_in">println</span>(x,y,z,w)</span><br><span class="line"><span class="built_in">println</span>(h,i,j)</span><br><span class="line"><span class="built_in">println</span>(l,m,n,o,p,q,r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> B <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="1-5-array，slice，map"><a href="#1-5-array，slice，map" class="headerlink" title="1.5 array，slice，map#"></a>1.5 array，slice，map<a href="https://www.cnblogs.com/rickiyang/p/11074184.html#3574601497" target="_blank" rel="noopener">#</a></h4><h5 id="array"><a href="#array" class="headerlink" title="array"></a>array</h5><p>array就是数组，定义方式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr [n]<span class="keyword">type</span></span><br></pre></td></tr></table></figure><p>在<code>[n]type</code>中，<code>n</code>表示数组的长度，<code>type</code>表示存储元素的类型。对数组的操作和其它语言类似，都是通过<code>[]</code>来进行读取或赋值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr [<span class="number">10</span>]<span class="keyword">int</span>  <span class="comment">// 声明了一个int类型的数组</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>      <span class="comment">// 数组下标是从0开始的</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>      <span class="comment">// 赋值操作</span></span><br></pre></td></tr></table></figure><p><strong>由于长度也是数组类型的一部分，因此<code>[3]int</code>与<code>[4]int</code>是不同的类型，数组也就不能改变长度</strong>。数组之间的赋值是值的赋值，即当把一个数组作为参数传入函数的时候，传入的其实是该数组的副本，而不是它的指针。如果要使用指针，那么就需要用到后面介绍的<code>slice</code>类型了。</p><p>数组可以使用另一种<code>:=</code>来声明:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">// 声明了一个长度为3的int数组</span></span><br><span class="line"></span><br><span class="line">b := [<span class="number">10</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">// 声明了一个长度为10的int数组，其中前三个元素初始化为1、2、3，其它默认为0</span></span><br><span class="line"></span><br><span class="line">c := [...]<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125; <span class="comment">// 可以省略长度而采用`...`的方式，Go会自动根据元素个数来计算长度</span></span><br></pre></td></tr></table></figure><p>Go支持嵌套数组，即多维数组。比如下面的代码就声明了一个二维数组：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明了一个二维数组，该数组以两个数组作为元素，其中每个数组中又有4个int类型的元素</span></span><br><span class="line">doubleArray := [<span class="number">2</span>][<span class="number">4</span>]<span class="keyword">int</span>&#123;[<span class="number">4</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, [<span class="number">4</span>]<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的声明可以简化，直接忽略内部的类型</span></span><br><span class="line">easyArray := [<span class="number">2</span>][<span class="number">4</span>]<span class="keyword">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>注意： [2][4] int表示的是一个int型数组，数组内有两个数组，每个数组有四个元素组成。</strong></p><h5 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h5><p>知道python数组的就知道slice，跟python的实现是一样的。</p><p>slice有一些简便的操作</p><ul><li><code>slice</code>的默认开始位置是0，<code>ar[:n]</code>等价于<code>ar[0:n]</code></li><li><code>slice</code>的第二个序列默认是数组的长度，<code>ar[n:]</code>等价于<code>ar[n:len(ar)]</code></li><li>如果从一个数组里面直接获取<code>slice</code>，可以这样<code>ar[:]</code>，因为默认第一个序列是0，第二个是数组的长度，即等价于<code>ar[0:len(ar)]</code></li></ul><p>下面有一些关于slice的示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个数组</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">10</span>]<span class="keyword">byte</span>&#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>&#125;</span><br><span class="line"><span class="comment">// 声明两个slice</span></span><br><span class="line"><span class="keyword">var</span> aSlice, bSlice []<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 演示一些简便操作</span></span><br><span class="line">aSlice = array[:<span class="number">3</span>] <span class="comment">// 等价于aSlice = array[0:3] aSlice包含元素: a,b,c</span></span><br><span class="line">aSlice = array[<span class="number">5</span>:] <span class="comment">// 等价于aSlice = array[5:10] aSlice包含元素: f,g,h,i,j</span></span><br><span class="line">aSlice = array[:]  <span class="comment">// 等价于aSlice = array[0:10] 这样aSlice包含了全部的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从slice中获取slice</span></span><br><span class="line">aSlice = array[<span class="number">3</span>:<span class="number">7</span>]  <span class="comment">// aSlice包含元素: d,e,f,g，len=4，cap=7</span></span><br><span class="line">bSlice = aSlice[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">// bSlice 包含aSlice[1], aSlice[2] 也就是含有: e,f</span></span><br><span class="line">bSlice = aSlice[:<span class="number">3</span>]  <span class="comment">// bSlice 包含 aSlice[0], aSlice[1], aSlice[2] 也就是含有: d,e,f</span></span><br><span class="line">bSlice = aSlice[<span class="number">0</span>:<span class="number">5</span>] <span class="comment">// 对slice的slice可以在cap范围内扩展，此时bSlice包含：d,e,f,g,h</span></span><br><span class="line">bSlice = aSlice[:]   <span class="comment">// bSlice包含所有aSlice的元素: d,e,f,g</span></span><br></pre></td></tr></table></figure><p><strong>重要：<code>slice</code>是引用类型，所以当引用改变其中元素的值时，其它的所有引用都会改变该值，例如上面的<code>aSlice</code>和<code>bSlice</code>，如果修改了<code>aSlice</code>中元素的值，那么<code>bSlice</code>相对应的值也会改变。</strong></p><p>对于<code>slice</code>有几个有用的内置函数：</p><ul><li><code>len</code> 获取<code>slice</code>的长度</li><li><code>cap</code> 获取<code>slice</code>的最大容量</li><li><code>append</code> 向<code>slice</code>里面追加一个或者多个元素，然后返回一个和<code>slice</code>一样类型的<code>slice</code></li><li><code>copy</code> 函数<code>copy</code>从源<code>slice</code>的<code>src</code>中复制元素到目标<code>dst</code>，并且返回复制的元素的个数</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.基于数组创建数组切片</span></span><br><span class="line"><span class="keyword">var</span> array  = [<span class="number">10</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line"><span class="keyword">var</span> slice = array[<span class="number">1</span>:<span class="number">7</span>] <span class="comment">//array[startIndex:endIndex] 不包含endIndex</span></span><br><span class="line"><span class="comment">//2.直接创建数组切片</span></span><br><span class="line">slice2 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">//3.直接创建并初始化数组切片</span></span><br><span class="line">slice3 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="comment">//4.基于数组切片创建数组切片</span></span><br><span class="line">slice5 := slice3[:<span class="number">4</span>]</span><br><span class="line"><span class="built_in">println</span>(slice5)</span><br><span class="line"><span class="comment">//5.遍历数组切片</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> slice3 &#123;</span><br><span class="line"><span class="built_in">println</span>(i, v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.len()和cap()</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">len</span> = <span class="built_in">len</span>(slice2) <span class="comment">//数组切片的长度</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">cap</span> = <span class="built_in">cap</span>(slice)  <span class="comment">//数组切片的容量</span></span><br><span class="line"><span class="built_in">println</span>(<span class="string">"len(slice2) ="</span>, <span class="built_in">len</span>)</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"cap(slice) ="</span>, <span class="built_in">cap</span>)</span><br><span class="line"><span class="comment">//7.append() 会生成新的数组切片</span></span><br><span class="line">slice4 := <span class="built_in">append</span>(slice2, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line">slice4 = <span class="built_in">append</span>(slice4, slice3...)</span><br><span class="line"><span class="built_in">println</span>(slice4)</span><br><span class="line"><span class="comment">//8.copy() 如果进行操作的两个数组切片元素个数不一致，将会按照个数较小的数组切片进行复制</span></span><br><span class="line"><span class="built_in">copy</span>(slice2, slice3) <span class="comment">//将slice3的前五个元素复制给slice2</span></span><br><span class="line"><span class="built_in">println</span>(slice2, slice3)</span><br></pre></td></tr></table></figure><p><strong>map</strong></p><p>map就是Java中的Map，python中的字典。它的格式为 <code>map[keyType]valueType</code> 。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruit := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"apple"</span>:<span class="number">5</span>,<span class="string">"orange"</span>:<span class="number">7</span>,<span class="string">"pineapple"</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">println</span>(fruit)</span><br><span class="line"><span class="keyword">var</span> appleCount = fruit[<span class="string">"apple"</span>]</span><br><span class="line"><span class="built_in">println</span>(appleCount)</span><br></pre></td></tr></table></figure><p>使用map过程中需要注意的几点：</p><ul><li><code>map</code>是无序的，每次打印出来的<code>map</code>都会不一样，它不能通过<code>index</code>获取，而必须通过<code>key</code>获取</li><li><code>map</code>的长度是不固定的，也就是和<code>slice</code>一样，也是一种引用类型</li><li>内置的<code>len</code>函数同样适用于<code>map</code>，返回<code>map</code>拥有的<code>key</code>的数量</li><li><code>map</code>的值可以很方便的修改，通过<code>numbers[&quot;one&quot;]=11</code>可以很容易的把key为<code>one</code>的字典值改为<code>11</code></li><li><code>map</code>和其他基本型别不同，它不是thread-safe，在多个go-routine存取时，必须使用mutex lock机制</li></ul><p><code>map</code>的初始化可以通过<code>key:val</code>的方式初始化值，同时<code>map</code>内置有判断是否存在<code>key</code>的方式</p><h4 id="1-6-make-new操作"><a href="#1-6-make-new操作" class="headerlink" title="1.6 make,new操作#"></a>1.6 make,new操作<a href="https://www.cnblogs.com/rickiyang/p/11074184.html#4055006481" target="_blank" rel="noopener">#</a></h4><p><code>make</code>用于内建类型（<code>map</code>、<code>slice</code> 和<code>channel</code>）的内存分配。<code>new</code>用于各种类型的内存分配。</p><p>内建函数<code>new</code>本质上说跟其它语言中的同名函数功能一样：<code>new(T)</code>分配了零值填充的<code>T</code>类型的内存空间，并且返回其地址，即一个<code>*T</code>类型的值。用Go的术语说，它返回了一个指针，指向新分配的类型<code>T</code>的零值。有一点非常重要：</p><blockquote><p><code>new</code>返回指针。</p></blockquote><p>内建函数<code>make(T, args)</code>与<code>new(T)</code>有着不同的功能，make只能创建<code>slice</code>、<code>map</code>和<code>channel</code>，并且返回一个有初始值(非零)的<code>T</code>类型，而不是<code>*T</code>。本质来讲，导致这三个类型有所不同的原因是指向数据结构的引用在使用前必须被初始化。例如，一个<code>slice</code>，是一个包含指向数据（内部<code>array</code>）的指针、长度和容量的三项描述符；在这些项目被初始化之前，<code>slice</code>为<code>nil</code>。对于<code>slice</code>、<code>map</code>和<code>channel</code>来说，<code>make</code>初始化了内部的数据结构，填充适当的值。</p><blockquote><p><code>make</code>返回初始化后的（非零）值。</p></blockquote><p>对于不同的数据类型，零值的意义是完全不一样的。比如，对于bool类型，零值为false；int的零值为0；string的零值是空字符串：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">b := <span class="built_in">new</span>(<span class="keyword">bool</span>)</span><br><span class="line"><span class="built_in">println</span>(*b)</span><br><span class="line">i := <span class="built_in">new</span>(<span class="keyword">int</span>)</span><br><span class="line"><span class="built_in">println</span>(*i)</span><br><span class="line">s := <span class="built_in">new</span>(<span class="keyword">string</span>)</span><br><span class="line"><span class="built_in">println</span>(*s)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>注意：上面最后string的输出是空值。</strong></p><h4 id="1-7-零值"><a href="#1-7-零值" class="headerlink" title="1.7 零值#"></a>1.7 零值<a href="https://www.cnblogs.com/rickiyang/p/11074184.html#1650063342" target="_blank" rel="noopener">#</a></h4><p>关于“零值”，所指并非是空值，而是一种“变量未填充前”的默认值，通常为0。 此处罗列 部分类型 的 “零值”</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>     <span class="number">0</span></span><br><span class="line"><span class="keyword">int8</span>    <span class="number">0</span></span><br><span class="line"><span class="keyword">int32</span>   <span class="number">0</span></span><br><span class="line"><span class="keyword">int64</span>   <span class="number">0</span></span><br><span class="line"><span class="keyword">uint</span>    <span class="number">0x0</span></span><br><span class="line"><span class="keyword">rune</span>    <span class="number">0</span> <span class="comment">//rune的实际类型是 int32</span></span><br><span class="line"><span class="keyword">byte</span>    <span class="number">0x0</span> <span class="comment">// byte的实际类型是 uint8</span></span><br><span class="line"><span class="keyword">float32</span> <span class="number">0</span> <span class="comment">//长度为 4 byte</span></span><br><span class="line"><span class="keyword">float64</span> <span class="number">0</span> <span class="comment">//长度为 8 byte</span></span><br><span class="line"><span class="keyword">bool</span>    <span class="literal">false</span></span><br><span class="line"><span class="keyword">string</span>  <span class="string">""</span></span><br></pre></td></tr></table></figure><h4 id="1-8-一些技巧"><a href="#1-8-一些技巧" class="headerlink" title="1.8 一些技巧#"></a>1.8 一些技巧<a href="https://www.cnblogs.com/rickiyang/p/11074184.html#1446116871" target="_blank" rel="noopener">#</a></h4><p>1.分组声明</p><p>在Go语言中，同时声明多个常量、变量，或者导入多个包时，可采用分组的方式进行声明。</p><p>例如下面的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span><span class="string">"log"</span></span><br><span class="line"><span class="keyword">import</span><span class="string">"net/http"</span></span><br><span class="line"><span class="keyword">import</span><span class="string">"strings"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">3</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"aa"</span></span><br><span class="line"><span class="keyword">var</span> prefix = <span class="string">"abc_"</span></span><br></pre></td></tr></table></figure><p>可以写成如下分组形式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">a = <span class="number">2</span>,</span><br><span class="line">    b = <span class="number">2</span>,</span><br><span class="line">    c = <span class="number">4</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span>(</span><br><span class="line">str = <span class="string">"aa"</span></span><br><span class="line">    prefix = <span class="string">"abc_"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>Go程序设计的一些规则</strong></p><p>Go之所以会那么简洁，是因为它有一些默认的行为：</p><ul><li>大写字母开头的变量是可导出的，也就是其它包可以读取的，是公有变量；小写字母开头的就是不可导出的，是私有变量。</li><li>大写字母开头的函数也是一样，相当于<code>class</code>中的带<code>public</code>关键词的公有函数；小写字母开头的就是有<code>private</code>关键词的私有函数。</li></ul><h3 id="2-流程和函数"><a href="#2-流程和函数" class="headerlink" title="2. 流程和函数#"></a>2. 流程和函数<a href="https://www.cnblogs.com/rickiyang/p/11074184.html#106724435" target="_blank" rel="noopener">#</a></h3><p>Go中流程控制分三大类：条件判断，循环控制和无条件跳转。</p><h4 id="2-1-流程"><a href="#2-1-流程" class="headerlink" title="2.1 流程#"></a>2.1 流程<a href="https://www.cnblogs.com/rickiyang/p/11074184.html#2071205643" target="_blank" rel="noopener">#</a></h4><h5 id="if"><a href="#if" class="headerlink" title="if"></a>if</h5><p>Go里面<code>if</code>条件判断语句中不需要括号，如下代码所示 ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x &gt; <span class="number">80</span>&#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"better"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"good"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go的<code>if</code>还有一个强大的地方就是条件判断语句里面允许声明一个变量，这个变量的作用域只能在该条件逻辑块内，其他地方就不起作用了，如下所示</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> countScore := getCountScore(); countScore &gt;= <span class="number">80</span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"better"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> countScore &gt;= <span class="number">60</span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"good"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"e......"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里打印countScore是找不到这个变量的</span></span><br><span class="line"><span class="built_in">println</span>(countScore)</span><br></pre></td></tr></table></figure><h5 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h5><p>Go有<code>goto</code>语句——请明智地使用它。用<code>goto</code>跳转到必须在当前函数内定义的标签。例如假设这样一个循环：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="number">4</span></span><br><span class="line">b := <span class="number">5</span></span><br><span class="line"><span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line"><span class="built_in">println</span>(a * b)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Ding:</span><br><span class="line">a = a+<span class="number">12</span></span><br><span class="line">b = a + (<span class="number">32</span>/<span class="number">4</span>)</span><br><span class="line"><span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line"><span class="keyword">goto</span> Ding</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：标签名是大小写敏感的</strong></p><h5 id="for"><a href="#for" class="headerlink" title="for"></a>for</h5><p>Go里面的for除了基本的循环外，还可以读取slice和map的数据：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++ &#123;</span><br><span class="line">sum += i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>for</code>配合<code>range</code>可以用于读取<code>slice</code>和<code>map</code>的数据：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruit := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"apple"</span>:<span class="number">5</span>,<span class="string">"orange"</span>:<span class="number">7</span>,<span class="string">"pineapple"</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k,v := <span class="keyword">range</span> fruit&#123;</span><br><span class="line">    <span class="built_in">println</span>(k,v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小插曲：</p><p><strong>“_”的使用</strong></p><p>由于 Go 支持 “多值返回”, 而对于“声明而未被调用”的变量, 编译器会报错, 在这种情况下, 可以使用<code>_</code>来丢弃不需要的返回值 例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruit :&#x3D; map[string]int&#123;&quot;apple&quot;:5,&quot;orange&quot;:7,&quot;pineapple&quot;:3&#125;</span><br><span class="line">for _,v :&#x3D; range fruit&#123;</span><br><span class="line">    println(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“_”相当于占位符的作用，这个位置必须要有一个值来接收，但是这个值又没有用，可以用 “ _”来占着位置。</p><h5 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h5><p>跟别的语言中的switch别无他致：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sex <span class="keyword">byte</span></span><br><span class="line"><span class="keyword">switch</span> sex &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"男生"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"女生"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"纳尼。。。。。"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-函数"><a href="#2-2-函数" class="headerlink" title="2.2 函数#"></a>2.2 函数<a href="https://www.cnblogs.com/rickiyang/p/11074184.html#203464258" target="_blank" rel="noopener">#</a></h4><p>函数是Go里面的核心设计，它通过关键字<code>func</code>来声明，它的格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcName</span><span class="params">(input1 type1, input2 type2)</span> <span class="params">(output1 type1, output2 type2)</span></span> &#123;</span><br><span class="line">    <span class="comment">//这里是处理逻辑代码</span></span><br><span class="line">    <span class="comment">//返回多个值</span></span><br><span class="line">    <span class="keyword">return</span> value1, value2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码我们看出:</p><ul><li>关键字<code>func</code>用来声明一个函数<code>funcName</code></li><li>函数可以有一个或者多个参数，每个参数后面带有类型，通过<code>,</code>分隔</li><li>函数可以返回多个值</li><li>上面返回值声明了两个变量<code>output1</code>和<code>output2</code>，如果你不想声明也可以，直接就两个类型</li><li>如果只有一个返回值且不声明返回值变量，那么你可以省略 包括返回值 的括号</li><li>如果没有返回值，那么就直接省略最后的返回信息</li><li>如果有返回值， 那么必须在函数的外层添加return语句</li></ul><p>来看一个最简单的函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a,b <span class="keyword">int</span>)</span> <span class="title">map</span>[]</span> &#123;</span><br><span class="line"><span class="keyword">var</span> resultMap = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">resultMap[<span class="string">"add"</span>] = a + b</span><br><span class="line">resultMap[<span class="string">"multi"</span>] = a * b</span><br><span class="line">resultMap[<span class="string">"subtract"</span>] = a - b</span><br><span class="line">resultMap[<span class="string">"division"</span>] = a / b</span><br><span class="line"><span class="keyword">return</span> resultMap</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">a := <span class="number">3</span></span><br><span class="line">b := <span class="number">4</span></span><br><span class="line">count := add(a, b)</span><br><span class="line"><span class="built_in">println</span>(count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>多个返回值：</strong></p><p>Go中函数可以有多个返回值，这个比java强悍100倍：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a,b <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a+b,a-b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">a := <span class="number">3</span></span><br><span class="line">b := <span class="number">4</span></span><br><span class="line">add,sub := add(a, b)</span><br><span class="line"><span class="built_in">println</span>(add,sub)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可变参数：</strong></p><p>跟Java中差不多吧：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myFunc</span><span class="params">(arg ...<span class="keyword">int</span>)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>defer</strong></p><p>defer是golang的一个特色功能，被称为“延迟调用函数”。当外部函数返回后执行defer。类似于其他语言的 try… catch … finally… 中的finally，当然差别还是明显的。</p><p>释放占用资源：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line">file, err := os.Open(<span class="string">"path"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//放在判断err状态之后</span></span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//todo</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"><span class="comment">//defer执行时机</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异常处理：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">println</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">file, err := os.Open(<span class="string">"path"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//todo</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="comment">//defer执行时机</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志输出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test3</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">t1 := time.Now()</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"耗时: %f s"</span>, time.Now().Sub(t1).Seconds())</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">//todo</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="comment">//defer执行时机</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-struct类型"><a href="#3-struct类型" class="headerlink" title="3. struct类型#"></a>3. struct类型<a href="https://www.cnblogs.com/rickiyang/p/11074184.html#109293279" target="_blank" rel="noopener">#</a></h4><p>Java中我们会去声明一些bean对象，里面包含字段和属性，在Go中可以声明一个struct类型的实体，在这个实体中声明一些属性，但是不可以在里面定义func。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">var</span> p person</span><br><span class="line">p.age = <span class="number">13</span></span><br><span class="line">p.name = <span class="string">"xiaoming"</span></span><br><span class="line"><span class="built_in">println</span>(p.name,p.age)</span><br><span class="line"></span><br><span class="line">p1 := person&#123;<span class="string">"xiaoming"</span>,<span class="number">13</span>&#125;</span><br><span class="line"><span class="built_in">println</span>(p1.name,p1.age)</span><br><span class="line"></span><br><span class="line">p2 := person&#123;age:<span class="number">13</span>,name:<span class="string">"xiaoming"</span>&#125;</span><br><span class="line"><span class="built_in">println</span>(p2.name,p2.age)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Go中的继承—匿名字段</strong></p><p>上面我们在定义struct的时候，里面的属性都是字段名和类型一一对应的。实际上Go也支持只提供类型而不写字段名的方式，也就是匿名字段。</p><p>当匿名字段是一个struct的时候，那么这个struct所拥有的全部字段都被隐式地引入了当前定义的这个struct。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PersonOther <span class="keyword">struct</span> &#123;</span><br><span class="line">phone <span class="keyword">string</span></span><br><span class="line">address <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">PersonOther</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">p1 := Person&#123;PersonOther&#123;<span class="string">"13242342123"</span>,<span class="string">"xxxxxxx"</span>&#125;,<span class="string">"xiaoming"</span>,<span class="number">13</span>&#125;</span><br><span class="line"><span class="built_in">println</span>(p1.address,p1.phone,p1.name,p1.age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在p1中是可以看到address和phone属性的，这就跟Java中的继承一样。</p><p>既然说到继承，那么肯定会有这样的一种情况，就是在Person和PersonOther中都定义过了phone属性，当我们用p1去获取的时候到底获取的是哪个对象的phone属性呢？</p><p><strong>Go里面很简单的解决了这个问题，最外层的优先访问，也就是当你通过<code>Person.phone</code>访问的时候，是访问student里面的字段，而不是PersonOther里面的字段。</strong></p><p>当前如果你想访问父类中的phone也不是不可以，Go还保留着父类中的对象呢，你可以这样取出来：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parentPhone := p1.PersonOther.phone</span><br></pre></td></tr></table></figure><p>在Java中如果是这样的话，父类的同名字段就被子类覆写了，取不出来。</p><h4 id="4-也谈谈面向对象编程—-多态"><a href="#4-也谈谈面向对象编程—-多态" class="headerlink" title="4. 也谈谈面向对象编程—-多态#"></a>4. 也谈谈面向对象编程—-多态<a href="https://www.cnblogs.com/rickiyang/p/11074184.html#2487989185" target="_blank" rel="noopener">#</a></h4><p>在Java中我们经常这样做：</p><p>定义一个关于计算面积的接口；</p><p>定义一个计算圆面积的类实现接口；</p><p>定义一个正方形计算面积的类实现接口；</p><p>定义一个计算长方形面积的类实现接口；</p><p>…</p><p>这样我们就抽象出来一套统一的计算面积的方案由一个接口把持，需要哪个面积计算就调用相关的实现。</p><p>在Go中同样也有这样的概念，但是实现方式确是不同。基于上面的原因所以就有了<code>method</code>的概念，<code>method</code>是附属在一个给定的类型上的，他的语法和函数的声明语法几乎一样，只是在<code>func</code>后面增加了一个receiver(也就是method所依从的主体)。</p><p>method的语法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r ReceiverType)</span> <span class="title">funcName</span><span class="params">(parameters)</span> <span class="params">(results)</span></span></span><br></pre></td></tr></table></figure><p>看一个具体的示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;</span><br><span class="line">redius <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Square <span class="keyword">struct</span> &#123;</span><br><span class="line">width,height <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Circle)</span> <span class="title">area</span><span class="params">()</span> <span class="title">float64</span></span>  &#123;</span><br><span class="line"><span class="keyword">return</span> c.redius * c.redius * <span class="number">3.14</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Square)</span> <span class="title">area</span><span class="params">()</span> <span class="title">float64</span></span>  &#123;</span><br><span class="line"><span class="keyword">return</span> s.height * s.width</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">c := Circle&#123;<span class="number">3.55</span>&#125;</span><br><span class="line">s := Square&#123;<span class="number">3</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">println</span>(c.area())</span><br><span class="line"><span class="built_in">println</span>(s.area())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到调用method通过Circle示例访问就像访问struct里面的字段一样。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Go是一门类似C的编译型语言，但是它的编译速度非常快。这门语言的关键字总共也就二十五个，比英文字母还少一个，这对于我们的学习来说就简单了很多。先让我们看一眼这些关键字都长什么样：&lt;/p&gt;
&lt;p&gt;下面列举了 Go 代码中会使用到的 25 个关键字或保留字：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;break&lt;/th&gt;
&lt;th&gt;default&lt;/th&gt;
&lt;th&gt;func&lt;/th&gt;
&lt;th&gt;interface&lt;/th&gt;
&lt;th&gt;select&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;case&lt;/td&gt;
&lt;td&gt;defer&lt;/td&gt;
&lt;td&gt;go&lt;/td&gt;
&lt;td&gt;map&lt;/td&gt;
&lt;td&gt;struct&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chan&lt;/td&gt;
&lt;td&gt;else&lt;/td&gt;
&lt;td&gt;goto&lt;/td&gt;
&lt;td&gt;package&lt;/td&gt;
&lt;td&gt;switch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;const&lt;/td&gt;
&lt;td&gt;fallthrough&lt;/td&gt;
&lt;td&gt;if&lt;/td&gt;
&lt;td&gt;range&lt;/td&gt;
&lt;td&gt;type&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;continue&lt;/td&gt;
&lt;td&gt;for&lt;/td&gt;
&lt;td&gt;import&lt;/td&gt;
&lt;td&gt;return&lt;/td&gt;
&lt;td&gt;var&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Go程序设计的一些规则&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="go" scheme="https://imonster.me/categories/go/"/>
    
    
      <category term="go" scheme="https://imonster.me/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go基本知识</title>
    <link href="https://imonster.me/2020/03/30/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
    <id>https://imonster.me/2020/03/30/go%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</id>
    <published>2020-03-30T09:23:47.000Z</published>
    <updated>2020-07-06T06:34:10.663Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-内建方面（make、new）"><a href="#1-内建方面（make、new）" class="headerlink" title="1.内建方面（make、new）"></a>1.内建方面（make、new）</h3><h5 id="make-创建变量（返回引用类型）"><a href="#make-创建变量（返回引用类型）" class="headerlink" title="make 创建变量（返回引用类型）"></a>make 创建变量（返回引用类型）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; mackslice mack切片(长度可变)</span><br><span class="line">func makeSlice() &#123;</span><br><span class="line">mslice :&#x3D; make([]string, 3)</span><br><span class="line">mslice[0] &#x3D; &quot;aa&quot;</span><br><span class="line">mslice[1] &#x3D; &quot;bb&quot;</span><br><span class="line">mslice[2] &#x3D; &quot;cc&quot;</span><br><span class="line">fmt.Println(mslice)</span><br><span class="line">&#125;</span><br><span class="line">func makeMap() &#123;</span><br><span class="line">mMap :&#x3D; make(map[string]string)</span><br><span class="line">mMap[&quot;name&quot;] &#x3D; &quot;ccc&quot;</span><br><span class="line">mMap[&quot;age&quot;] &#x3D; &quot;10&quot;</span><br><span class="line">fmt.Println(mMap)</span><br><span class="line">fmt.Println(reflect.TypeOf(mMap))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;makeChan 创建没有缓存的chan(管道)</span><br><span class="line">func makeChan() &#123;</span><br><span class="line">&#x2F;&#x2F;缓存为3</span><br><span class="line">&#x2F;&#x2F;mchan :&#x3D;make(chan int,3)</span><br><span class="line">mchan :&#x3D; make(chan int)</span><br><span class="line">close(mchan)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-内建方面（make、new）&quot;&gt;&lt;a href=&quot;#1-内建方面（make、new）&quot; class=&quot;headerlink&quot; title=&quot;1.内建方面（make、new）&quot;&gt;&lt;/a&gt;1.内建方面（make、new）&lt;/h3&gt;&lt;h5 id=&quot;make-创建变量
      
    
    </summary>
    
    
      <category term="go" scheme="https://imonster.me/categories/go/"/>
    
    
      <category term="go" scheme="https://imonster.me/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>测试环境压缩测试</title>
    <link href="https://imonster.me/2020/03/18/%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E5%8E%8B%E7%BC%A9%E6%B5%8B%E8%AF%95/"/>
    <id>https://imonster.me/2020/03/18/%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E5%8E%8B%E7%BC%A9%E6%B5%8B%E8%AF%95/</id>
    <published>2020-03-18T09:25:11.000Z</published>
    <updated>2020-07-06T06:34:10.748Z</updated>
    
    <content type="html"><![CDATA[<p>获取topic列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --zookeeper cdh-worker-dc-1:2181,cdh-worker-dc-2:2181,cdh-worker-dc-3:2181&#x2F;kafka --list</span><br></pre></td></tr></table></figure><p>获取topic配置信息</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-configs.sh --zookeeper cdh-worker-dc-1:2181,cdh-worker-dc-2:2181,cdh-worker-dc-3:2181&#x2F;kafka --entity-type topics --entity-name test_dis-upper-lower-limits-all_gzip --describe</span><br></pre></td></tr></table></figure><p>获取kafka日志信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -h &#x2F;data&#x2F;kafkalogs&#x2F;test_*</span><br></pre></td></tr></table></figure><p>修改topic配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kafka-configs.sh --zookeeper cdh-worker-dc-1:2181,cdh-worker-dc-2:2181,cdh-worker-dc-3:2181&#x2F;kafka  --entity-type topics --entity-name test_dis-upper-lower-limits-all_gzip --alter --add-config compression.type&#x3D;gzip</span><br><span class="line"></span><br><span class="line">kafka_2.11-1.1.0]# kafka-configs.sh --zookeeper cdh-worker-dc-1:2181,cdh-worker-dc-2:2181,cdh-worker-dc-3:2181&#x2F;kafka  --entity-type topics --entity-name test_dis-upper-lower-limits-all_snappy --alter --add-config compression.type&#x3D;snappy</span><br><span class="line"></span><br><span class="line">kafka-configs.sh --zookeeper cdh-worker-dc-1:2181,cdh-worker-dc-2:2181,cdh-worker-dc-3:2181&#x2F;kafka  --entity-type topics --entity-name test_dis-upper-lower-limits-all_lz4 --alter --add-config compression.type&#x3D;lz4</span><br></pre></td></tr></table></figure><p>查看偏移量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-run-class.sh kafka.tools.GetOffsetShell --topic test_dis-upper-lower-limits-all  --time -1 --broker-list 10.65.6.19:9092 --partitions 0</span><br></pre></td></tr></table></figure><p>消费数据</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;获取topic列表&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kafka-topics.sh --zookeeper cdh-worker-dc-1:2181,cdh-worker-dc-2:2181,cdh-worker-dc-3:2181&amp;#x2F;kafka --list&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;获取topic配置信息&lt;/p&gt;
    
    </summary>
    
    
      <category term="kafka" scheme="https://imonster.me/categories/kafka/"/>
    
    
      <category term="kafka" scheme="https://imonster.me/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>华为边云协同</title>
    <link href="https://imonster.me/2020/02/27/%E5%8D%8E%E4%B8%BA%E8%BE%B9%E4%BA%91%E5%8D%8F%E5%90%8C/"/>
    <id>https://imonster.me/2020/02/27/%E5%8D%8E%E4%B8%BA%E8%BE%B9%E4%BA%91%E5%8D%8F%E5%90%8C/</id>
    <published>2020-02-27T06:35:42.000Z</published>
    <updated>2020-07-06T06:34:11.159Z</updated>
    
    <content type="html"><![CDATA[<p>1.边缘端安装edge结构</p><p><img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200227151447.png" alt=""></p><p>2.根据配置文件包下的配置信息启动edge并创建mqtt监听</p><p><img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200227160121.png" alt=""></p><a id="more"></a><p>启动mqtt监听</p><p><img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200227160137.png" alt=""></p><h2 id="交互原理"><a href="#交互原理" class="headerlink" title="交互原理"></a>交互原理</h2><p>边缘节点纳管后，会在边缘节点上安装Edge Agent，其中设备管理相关则组件如下所示。</p><ul><li>EdgeHub：WebSocket客户端，包括同步云端资源更新、报告边缘节点和设备信息到云端等功能。</li><li>DeviceTwin：设备孪生，负责存储设备状态并将设备状态同步到云端。</li><li>EventBus：与 MQTT 服务器交互的客户端，为其他组件提供订阅和发布消息的功能。</li><li>MQTT Broker：MQTT服务器。</li></ul><p>图1 边缘设备管理<br><img src="https://support.huaweicloud.com/usermanual-ief/zh-cn_image_0170187645.png" alt="点击放大"></p><p>设备、边缘节点、IEF通信的过程中，设备孪生（DeviceTwin）起到了一个非常重要的作用，设备孪生保持设备的动态数据，包括特定背景下的设备专有实时数据，例如灯的开、关状态。</p><p>设备孪生具有与物理设备相同的特性，便于设备与应用之间进行更好地通信。应用发送的命令首先到达设备孪生，设备孪生根据应用设置的Expected State（期望的状态）进行状态更新，此外设备实时反馈自身的Actual State（真实的状态），设备孪生同时记录设备的Actual State和Expected State 。这种方式也使设备在离线状况下再次上线时，设备的状态也能得到同步。</p><h4 id="设备上报实际状态到云端"><a href="#设备上报实际状态到云端" class="headerlink" title="设备上报实际状态到云端"></a>设备上报实际状态到云端</h4><p>设备上报实际状态到云端的过程如<a href="https://support.huaweicloud.com/usermanual-ief/ief_01_0036.html#ief_01_0036__fig17576120154019" target="_blank" rel="noopener">图2</a>所示。</p><p>图2 设备上报状态<br><img src="https://support.huaweicloud.com/usermanual-ief/zh-cn_image_0170509950.png" alt="点击放大"></p><ol><li>设备将实际状态（Actual State）实时上报给MQTT Broker。</li><li>EventBus从MQTT Broker收到订阅消息，消息内容包含设备的实际状态。</li><li>EventBus把设备实际状态发送给DeviceTwin，DeviceTwin在边缘节点存储设备实际状态。</li><li>DeviceTwin同步实际状态给WebSocket客户端EdgeHub。</li><li>EdgeHub发送消息给IEF。</li></ol><h4 id="云端修改孪生属性控制设备状态"><a href="#云端修改孪生属性控制设备状态" class="headerlink" title="云端修改孪生属性控制设备状态"></a>云端修改孪生属性控制设备状态</h4><p>图3 修改设备状态<br><img src="https://support.huaweicloud.com/usermanual-ief/zh-cn_image_0170509951.png" alt="点击放大"></p><ol><li>在IEF中修改设备的孪生属性，IEF将设备期望状态（Expected State）发送给边缘节点的EdgeHub。</li><li>EdgeHub发送设备期望状态消息到DeviceTwin，DeviceTwin在边缘节点存储设备期望状态。</li><li>设备实时发消息给MQTT Broker查询设备期望状态。</li><li>EventBus接收到从MQTT Broker发过来的消息。</li><li>EventBus根据消息去查询设备期望状态。</li><li>DeviceTwin反馈当前设备期望状态给EventBus。</li><li>EventBus发送设备期望状态的结果给MQTT Broker。</li><li>设备从MQTT Broker收到订阅消息，根据期望状态调整实际状态。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.边缘端安装edge结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200227151447.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;2.根据配置文件包下的配置信息启动edge并创建mqtt监听&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200227160121.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="https://imonster.me/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="https://imonster.me/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>华为HSAM模板</title>
    <link href="https://imonster.me/2020/02/26/%E5%8D%8E%E4%B8%BAHSAM%E6%A8%A1%E6%9D%BF/"/>
    <id>https://imonster.me/2020/02/26/%E5%8D%8E%E4%B8%BAHSAM%E6%A8%A1%E6%9D%BF/</id>
    <published>2020-02-26T06:52:04.000Z</published>
    <updated>2020-07-06T06:34:11.150Z</updated>
    
    <content type="html"><![CDATA[<p>华为云 HSAM 模板</p><p>原文链接:<a href="https://support.huaweicloud.com/tg-functiongraph/functiongraph_08_0380.html" target="_blank" rel="noopener">https://support.huaweicloud.com/tg-functiongraph/functiongraph_08_0380.html</a></p><p>函数配置文件详解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line">​&#96;&#96;&#96;yaml   </span><br><span class="line">SAMversion: &#39;v1&#39;</span><br><span class="line">Resources:</span><br><span class="line">#函数名称</span><br><span class="line">   MyFunc1: # Function resource name</span><br><span class="line">    #函数类型（HC::Serverless::Function \ HC::Serverless::FunctionStage）</span><br><span class="line">    Type: &#39;HC::Serverless::Function&#39;</span><br><span class="line">    #Function类型 属性</span><br><span class="line">    Properties:</span><br><span class="line">      #名称</span><br><span class="line">      FuncName: testFunc1 </span><br><span class="line">      #描述</span><br><span class="line">      Description: &quot;This is my Func1&quot; </span><br><span class="line">      #函数执行入口</span><br><span class="line">      Handler: index.handler </span><br><span class="line">      #运行环境</span><br><span class="line">      Runtime: Python2.7</span><br><span class="line">      #函数执行内存使用大小</span><br><span class="line">      MemorySize: 128</span><br><span class="line">      #函数在被终止之前可以运行的最长时间，单位是秒，范围3～900秒，默认为 3 秒。</span><br><span class="line">      Timeout: 180</span><br><span class="line">      #OBS上传文件方式时必填，本地代码文件位置</span><br><span class="line">      CodeUri: &quot;&quot;</span><br><span class="line">      #在线编辑时的函数源码</span><br><span class="line">      Code: |</span><br><span class="line">        # -*- coding:utf-8 -*-</span><br><span class="line">        import json</span><br><span class="line">        def handler (event, context):</span><br><span class="line">            output &#x3D; &#39;Hello message: &#39; + json.dumps(event)</span><br><span class="line">            return output</span><br><span class="line">      #为函数配置委托（普通账号、云账号）。</span><br><span class="line">      Xrole: allService</span><br><span class="line">      #环境变量</span><br><span class="line">      Environment:</span><br><span class="line">        Variables:</span><br><span class="line">          key1: value1</span><br><span class="line">          key2: value2</span><br><span class="line">   #-----事件源类型-----------------------------------</span><br><span class="line">   #OBS 触发器</span><br><span class="line">   ObsEvt1: # OBS event resource name</span><br><span class="line">    Type: OBS</span><br><span class="line">    Properties:</span><br><span class="line">      #OBS桶的名称。</span><br><span class="line">      Bucket: my-photo-bucket</span><br><span class="line">      #OBS触发事件列表</span><br><span class="line">      EventType:</span><br><span class="line">        - ObjectCreated:*</span><br><span class="line">        - ObjectRemoved:*</span><br><span class="line">      #前缀过滤配置。 用来限制对以此关键字开头的对象的通知。</span><br><span class="line">      Prefix: fss</span><br><span class="line">      #后缀过滤配置。 用来限制对以此关键字结尾的对象的通知。</span><br><span class="line">      Suffix: jpg</span><br><span class="line">   #SMN 触发器</span><br><span class="line">   SmnEvt: # SMN event resource name</span><br><span class="line">    Type: SMN</span><br><span class="line">    Properties:</span><br><span class="line">      #订阅的SMN主题名称</span><br><span class="line">      Topic: topic1</span><br><span class="line">      #订阅备注</span><br><span class="line">      Remark: APItest</span><br><span class="line">   #DMS 触发器</span><br><span class="line">   DmsEvt: # DMS event resource name</span><br><span class="line">    Type: DMS</span><br><span class="line">    Properties:</span><br><span class="line">      #ConsumerGroupId</span><br><span class="line">      ConsumerGroupId: g-92777f57-a42a-401e-829d-4151417c639f</span><br><span class="line">      #DMS队列ID</span><br><span class="line">      QueueId: a99e1c82-808a-4d3b-b03a-0e161e514c2c</span><br><span class="line">      #拉取周期为DMS触发器轮询消息的间隔时间</span><br><span class="line">      PollingInterval: 30</span><br><span class="line">   #LTS 触发器</span><br><span class="line">   LtsEvt: # LTS event resource name</span><br><span class="line">    Type: LTS</span><br><span class="line">    Properties:</span><br><span class="line">      #LTS日志组ID</span><br><span class="line">      GroupId: fd537073-7ffb-11e8-b63a-286ed488ce71</span><br><span class="line">      #LTS日志组名称</span><br><span class="line">      GroupName: test-log-group-1</span><br><span class="line">      #LTS日志主题ID</span><br><span class="line">      TopicId: 51acbef6-aa92-11e8-810a-286ed488ce71</span><br><span class="line">      #LTS日志主题名称</span><br><span class="line">      TopicName: lts-topic-aos</span><br><span class="line">   #CTS 触发器</span><br><span class="line">   CtsEvt: # CTS event resource name</span><br><span class="line">    Type: CTS</span><br><span class="line">    Properties:</span><br><span class="line">      #名称</span><br><span class="line">      Name: ctstest</span><br><span class="line">      #支持审计的服务操作</span><br><span class="line">      Operations:</span><br><span class="line">        AOS:</span><br><span class="line">          stack:</span><br><span class="line">            - createStack</span><br><span class="line">            - deleteStack</span><br><span class="line">          quota:</span><br><span class="line">            - updateQuota</span><br><span class="line">        CCE(1.0):</span><br><span class="line">          app:</span><br><span class="line">            - createApp</span><br><span class="line">            - deleteApp</span><br><span class="line">          image:</span><br><span class="line">            - deleteImage</span><br><span class="line">   #DIS 触发器</span><br><span class="line">   DisEvt: # DIS event resource name</span><br><span class="line">    Type: DIS</span><br><span class="line">    Properties:</span><br><span class="line">      #通道名称</span><br><span class="line">      Stream: dis-test</span><br><span class="line">      #批处理大小，有效范围为1到10000</span><br><span class="line">      BatchSize: 100</span><br><span class="line">      #在流中开始读取数据的位置，支持TRIM_HORIZON，LATEST</span><br><span class="line">      ShardIteratorType: TRIM_HORIZON</span><br><span class="line">      #拉取流数据的周期(秒)</span><br><span class="line">      PollingInterval: 30</span><br><span class="line">   #APIG 触发器（）</span><br><span class="line">   ApiEvt: # APIG event resource name</span><br><span class="line">    Type: APIG</span><br><span class="line">    Properties:</span><br><span class="line">      #API的名称</span><br><span class="line">      ApiName: testApi</span><br><span class="line">      #API分组的名称</span><br><span class="line">      ApiGroup: my_apigroup</span><br><span class="line">      #安全认证类型（IAM、APP和NONE）</span><br><span class="line">      Auth: IAM</span><br><span class="line">      #请求类型（HTTP、HTTPS）</span><br><span class="line">      Protocol: HTTPS</span><br><span class="line">      #请求超时时间</span><br><span class="line">      Timeout: 5000</span><br><span class="line">   #定时触发器</span><br><span class="line">   TimerEvt: # TIMER event resource name</span><br><span class="line">     Type: TIMER</span><br><span class="line">     Properties:</span><br><span class="line">       #触发器名称</span><br><span class="line">       Name: my_timer</span><br><span class="line">       #触发间隔</span><br><span class="line">       Schedule: 3m</span><br><span class="line">       #触发类型（Rate&#x2F;Cron）</span><br><span class="line">       ScheduleType: Rate</span><br><span class="line">       #触发时包含的附加信息</span><br><span class="line">       UserEvent: &quot;user data&quot;</span><br><span class="line">   #----------FunctionStage 配置。FunctionStage 资源包含一个函数和若干触发器----------</span><br><span class="line">   MyFuncStage1: # FunctionStage resource name</span><br><span class="line">    Type: &#39;HC::Serverless::FunctionStage&#39;</span><br><span class="line">    Properties:</span><br><span class="line">      #关联函数名称</span><br><span class="line">      Function: MyFunc1</span><br><span class="line">      #关联的触发器</span><br><span class="line">      Events:</span><br><span class="line">        TimerEvt</span><br><span class="line">        LtsEvt</span><br><span class="line">        CtsEvt</span><br><span class="line">        ApiEvt</span><br><span class="line">​</span><br></pre></td></tr></table></figure><pre><code>&lt;!--more--&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;华为云 HSAM 模板&lt;/p&gt;
&lt;p&gt;原文链接:&lt;a href=&quot;https://support.huaweicloud.com/tg-functiongraph/functiongraph_08_0380.html&quot; target=&quot;_blank&quot; rel=&quot;noopen
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://imonster.me/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="https://imonster.me/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>华为云函数详情</title>
    <link href="https://imonster.me/2020/02/26/%E5%8D%8E%E4%B8%BA%E4%BA%91%E5%87%BD%E6%95%B0%E8%AF%A6%E6%83%85/"/>
    <id>https://imonster.me/2020/02/26/%E5%8D%8E%E4%B8%BA%E4%BA%91%E5%87%BD%E6%95%B0%E8%AF%A6%E6%83%85/</id>
    <published>2020-02-26T02:30:44.000Z</published>
    <updated>2020-07-06T06:34:11.155Z</updated>
    
    <content type="html"><![CDATA[<p>函数包含：hsam模板文件+函数源码及依赖包</p><h3 id="1-配置文件结构"><a href="#1-配置文件结构" class="headerlink" title="1.配置文件结构"></a>1.配置文件结构</h3><p>参考文档：</p><p>1.<a href="http://note.youdao.com/noteshare?id=903ab654d02e3ad5496774fab9595028&amp;sub=8FA88DB421034DF196650E80AE814CC7" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=903ab654d02e3ad5496774fab9595028&amp;sub=8FA88DB421034DF196650E80AE814CC7</a></p><a id="more"></a><p>2.<a href="https://support.huaweicloud.com/tg-functiongraph/functiongraph_08_0380.html" target="_blank" rel="noopener">https://support.huaweicloud.com/tg-functiongraph/functiongraph_08_0380.html</a></p><h5 id="python"><a href="#python" class="headerlink" title="python"></a>python</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">HcCrmTemplateVersion: v1</span><br><span class="line">Resources:</span><br><span class="line">  hello-python3:</span><br><span class="line">    Type: HC::Serverless::Function</span><br><span class="line">    Properties:</span><br><span class="line">      Handler: index.handler</span><br><span class="line">      Runtime: Python3.6</span><br><span class="line">      CodeType: zip</span><br><span class="line">      CodeFileName: index.zip</span><br><span class="line">      CodeUrl: &quot;&quot;</span><br><span class="line">      Description: &quot;&quot;</span><br><span class="line">      MemorySize: 128</span><br><span class="line">      Timeout: 3</span><br><span class="line">      Version: latest</span><br><span class="line">      Environment:</span><br><span class="line">        Variables: &#123;&#125;</span><br><span class="line">      InitializerHandler: &quot;&quot;</span><br><span class="line">      InitializerTimeout: 0</span><br></pre></td></tr></table></figure><h5 id="java"><a href="#java" class="headerlink" title="java"></a>java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">HcCrmTemplateVersion: v1</span><br><span class="line">Resources:</span><br><span class="line">  java-test:</span><br><span class="line">    Type: HC::Serverless::Function</span><br><span class="line">    Properties:</span><br><span class="line">      Handler: com.function.demo.TiggerTest.ltsTest</span><br><span class="line">      Runtime: Java8</span><br><span class="line">      CodeType: jar</span><br><span class="line">      CodeFileName: javafunction.jar</span><br><span class="line">      CodeUrl: &quot;&quot;</span><br><span class="line">      Description: &quot;&quot;</span><br><span class="line">      MemorySize: 128</span><br><span class="line">      Timeout: 3</span><br><span class="line">      Version: latest</span><br><span class="line">      Environment:</span><br><span class="line">        Variables: &#123;&#125;</span><br><span class="line">      InitializerHandler: &quot;&quot;</span><br><span class="line">      InitializerTimeout: 0</span><br></pre></td></tr></table></figure><h3 id="2-函数结构"><a href="#2-函数结构" class="headerlink" title="2..函数结构"></a>2..函数结构</h3><ul><li><p>Nods.js工程ZIP包目录示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Example.zip                            示例工程包</span><br><span class="line">|--- lib                               业务文件目录</span><br><span class="line">|--- node_modules                      npm三方件目录</span><br><span class="line">|--- index.js                          入口js文件（必选）</span><br><span class="line">|--- package.json                      npm项目管理文件</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Python工程ZIP包目录示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Example.zip                            示例工程包</span><br><span class="line">|--- com                               业务文件目录</span><br><span class="line">|--- PLI                               第三方依赖PLI目录</span><br><span class="line">|--- index.py                          入口py文件（必选）</span><br><span class="line">|--- watermark.py                      实现打水印功能的py文件</span><br><span class="line">|--- watermark.png                     水印图片</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200227151156.png" alt=""></p></li><li><p>Java工程ZIP包目录示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Example.zip                            示例工程包</span><br><span class="line">|--- DISTest.jar                       业务功能JAR包</span><br><span class="line">|--- commons-lang-2.6.jar              第三方依赖JAR包</span><br><span class="line">|--- commons-beanutils-1.9.1.jar       第三方依赖JAR包</span><br><span class="line">|--- commons-collections-3.2.1.jar     第三方依赖JAR包</span><br><span class="line">|--- commons-logging-1.1.1.jar         第三方依赖JAR包</span><br><span class="line">|--- ezmorph-1.0.6.jar                 第三方依赖JAR包</span><br><span class="line">|--- json-lib-2.4.jar                  第三方依赖JAR包</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200227150906.png" alt=""></p></li><li><p>Go工程ZIP包目录示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Example.zip                            示例工程包</span><br><span class="line">|--- testplugin.so                     业务功能包</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>C#工程ZIP包目录示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Example.zip                                   示例工程包</span><br><span class="line">|--- fssExampleCsharp2.0.deps.json            工程编译产生文件</span><br><span class="line">|--- fssExampleCsharp2.0.dll                  工程编译产生文件</span><br><span class="line">|--- fssExampleCsharp2.0.pdb                  工程编译产生文件</span><br><span class="line">|--- fssExampleCsharp2.0.runtimeconfig.json   工程编译产生文件</span><br><span class="line">|--- Handler                                  帮助文件，可直接使用</span><br><span class="line">|--- HC.Serverless.Function.Common.dll        函数工作流提供的dll</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>定制运行时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Example.zip                                   示例工程包</span><br><span class="line">|--- bootstrap                               可执行引导文件</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-执行逻辑"><a href="#3-执行逻辑" class="headerlink" title="3..执行逻辑"></a>3..执行逻辑</h3><p>用户函数执行调度包括以下几个阶段。</p><ol><li>FunctionGraph预先为函数分配执行函数的容器资源。</li><li>下载函数代码；</li><li>通过runtime运行时加载代码。</li><li>用户函数内部进行初始化逻辑。</li><li>函数处理请求并将结果返回。</li></ol><p>其中1、2、3是系统层面的冷启动开销，通过对调度以及各个环节的优化，函数服务能做到负载快速增长时稳定的延时。第4步是函数内部初始化逻辑，属于应用层面的冷启动开销，例如深度学习场景下加载规格较大的模型、数据库场景下连接池构建、函数依赖库加载等等。</p><p>Initializer是函数的初始化逻辑入口，不同于请求处理逻辑入口的handler，在有函数初始化的需求场景中，设置了Initializer后，FunctionGraph首先调用initializer完成函数的初始化，之后再调用handler处理请求；如果没有函数初始化的需求则可以跳过initializer，直接调用handler处理请求</p><p>为了减小应用层冷启动对延时的影响，函数计算推出了initializer接口，系统能识别用户函数的初始化逻辑，从而在调度上做相应的优化。</p><h3 id="4-边缘端函数部署（目前只支持部署创建的python函数部署）"><a href="#4-边缘端函数部署（目前只支持部署创建的python函数部署）" class="headerlink" title="4.边缘端函数部署（目前只支持部署创建的python函数部署）"></a>4.边缘端函数部署（目前只支持部署创建的python函数部署）</h3><h5 id="1-在IEF中注册边缘节点"><a href="#1-在IEF中注册边缘节点" class="headerlink" title="1.在IEF中注册边缘节点"></a>1.在IEF中注册边缘节点</h5><p>2.获取edge管理工具安装包和配置文件包</p><p><img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200227155756.png" alt=""></p><h5 id="3-登陆边缘机器，部署管理工具"><a href="#3-登陆边缘机器，部署管理工具" class="headerlink" title="3.登陆边缘机器，部署管理工具"></a>3.登陆边缘机器，部署管理工具</h5><p><img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200227155816.png" alt=""></p><h5 id="4-等待mqtt服务启动"><a href="#4-等待mqtt服务启动" class="headerlink" title="4.等待mqtt服务启动"></a>4.等待mqtt服务启动</h5><p><img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200227155833.png" alt=""></p><p>查看云端边缘节点是否纳管和启动</p><p><img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200227154502.png" alt=""></p><h5 id="5-创建函数应用"><a href="#5-创建函数应用" class="headerlink" title="5.创建函数应用"></a>5.创建函数应用</h5><p><img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200227154904.png" alt=""></p><h5 id="6-添加节点并部署函数到边缘节点"><a href="#6-添加节点并部署函数到边缘节点" class="headerlink" title="6.添加节点并部署函数到边缘节点"></a>6.添加节点并部署函数到边缘节点</h5><p><img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200227155103.png" alt=""></p><h4 id="IEF云边协同原理解析："><a href="#IEF云边协同原理解析：" class="headerlink" title="IEF云边协同原理解析："></a>IEF云边协同原理解析：</h4><p><a href="http://note.youdao.com/noteshare?id=59138617dbb24e995b634e245a30548b&amp;sub=F30864F0FC594AA79D867CC5C390DA11" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=59138617dbb24e995b634e245a30548b&amp;sub=F30864F0FC594AA79D867CC5C390DA11</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;函数包含：hsam模板文件+函数源码及依赖包&lt;/p&gt;
&lt;h3 id=&quot;1-配置文件结构&quot;&gt;&lt;a href=&quot;#1-配置文件结构&quot; class=&quot;headerlink&quot; title=&quot;1.配置文件结构&quot;&gt;&lt;/a&gt;1.配置文件结构&lt;/h3&gt;&lt;p&gt;参考文档：&lt;/p&gt;
&lt;p&gt;1.&lt;a href=&quot;http://note.youdao.com/noteshare?id=903ab654d02e3ad5496774fab9595028&amp;amp;sub=8FA88DB421034DF196650E80AE814CC7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://note.youdao.com/noteshare?id=903ab654d02e3ad5496774fab9595028&amp;amp;sub=8FA88DB421034DF196650E80AE814CC7&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="https://imonster.me/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="https://imonster.me/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>使用本地注册表创建openfaas-function</title>
    <link href="https://imonster.me/2020/02/22/%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E6%B3%A8%E5%86%8C%E8%A1%A8%E5%88%9B%E5%BB%BAopenfaas-function/"/>
    <id>https://imonster.me/2020/02/22/%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E6%B3%A8%E5%86%8C%E8%A1%A8%E5%88%9B%E5%BB%BAopenfaas-function/</id>
    <published>2020-02-22T07:01:59.000Z</published>
    <updated>2020-07-06T06:34:11.137Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 --restart always --name registry registry:2</span><br></pre></td></tr></table></figure><h3 id="Test-pushing-the-alpine-image-to-the-local-registry"><a href="#Test-pushing-the-alpine-image-to-the-local-registry" class="headerlink" title="Test pushing the alpine image to the local registry"></a>Test pushing the alpine image to the local registry</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull alpine</span><br><span class="line">docker tag alpine localhost:5000&#x2F;alpine</span><br><span class="line">docker push localhost:5000&#x2F;alpine</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="View-the-repositories"><a href="#View-the-repositories" class="headerlink" title="View the repositories"></a>View the repositories</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:5000&#x2F;v2&#x2F;_catalog</span><br></pre></td></tr></table></figure><h3 id="View-the-images-in-a-repository"><a href="#View-the-images-in-a-repository" class="headerlink" title="View the images in a repository"></a>View the images in a repository</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:5000&#x2F;v2&#x2F;alpine&#x2F;tags&#x2F;list</span><br></pre></td></tr></table></figure><h3 id="Set-an-environment-variable-to-point-faas-cli"><a href="#Set-an-environment-variable-to-point-faas-cli" class="headerlink" title="Set an environment variable to point faas-cli"></a>Set an environment variable to point faas-cli</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Environment]::SetEnvironmentVariable(&quot;OPENFAAS_URL&quot;, &quot;http:&#x2F;&#x2F;localhost:31112&quot;, &quot;Process&quot;&quot;</span><br></pre></td></tr></table></figure><h3 id="Create-a-root-folder-for-the-functions"><a href="#Create-a-root-folder-for-the-functions" class="headerlink" title="Create a root folder for the functions"></a>Create a root folder for the functions</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~&#x2F;Desktop&#x2F;func</span><br><span class="line">cd ~&#x2F;Desktop&#x2F;func</span><br></pre></td></tr></table></figure><h3 id="Pull-the-templates"><a href="#Pull-the-templates" class="headerlink" title="Pull the templates"></a>Pull the templates</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">faas-cli template pull</span><br><span class="line">faas-cli new --list</span><br></pre></td></tr></table></figure><h3 id="Create-a-new-function"><a href="#Create-a-new-function" class="headerlink" title="Create a new function"></a>Create a new function</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faas-cli new --lang csharp hello-csharp --prefix&#x3D;&quot;localhost:5000&quot;</span><br></pre></td></tr></table></figure><h3 id="Build-push-and-deploy"><a href="#Build-push-and-deploy" class="headerlink" title="Build, push, and deploy"></a>Build, push, and deploy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">faas-cli build -f .&#x2F;hello-csharp.yml</span><br><span class="line">faas-cli push -f .&#x2F;hello-csharp.yml</span><br><span class="line">faas-cli deploy -f .&#x2F;hello-csharp.yml</span><br></pre></td></tr></table></figure><h3 id="Test-it"><a href="#Test-it" class="headerlink" title="Test it"></a>Test it</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo Hi Elijah | faas-cli invoke hello-csharp</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run -d -p 5000:5000 --restart always --name registry registry:2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h3 id=&quot;Test-pushing-the-alpine-image-to-the-local-registry&quot;&gt;&lt;a href=&quot;#Test-pushing-the-alpine-image-to-the-local-registry&quot; class=&quot;headerlink&quot; title=&quot;Test pushing the alpine image to the local registry&quot;&gt;&lt;/a&gt;Test pushing the alpine image to the local registry&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker pull alpine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker tag alpine localhost:5000&amp;#x2F;alpine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker push localhost:5000&amp;#x2F;alpine&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="https://imonster.me/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="https://imonster.me/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>openfaas-faas-cli操作</title>
    <link href="https://imonster.me/2020/02/22/openfaas-faas-cli%E6%93%8D%E4%BD%9C/"/>
    <id>https://imonster.me/2020/02/22/openfaas-faas-cli%E6%93%8D%E4%BD%9C/</id>
    <published>2020-02-22T02:34:50.000Z</published>
    <updated>2020-07-06T06:34:11.116Z</updated>
    
    <content type="html"><![CDATA[<p>常用指令</p><p>CLI支持的主要命令是：</p><ul><li><code>faas-cli new</code> -通过当前目录中的模板创建新功能</li><li><code>faas-cli login</code> -存储OpenFaaS网关的基本身份验证凭据（支持多个网关）</li><li><code>faas-cli logout</code> -删除给定网关的基本身份验证凭据</li><li><code>faas-cli up</code> -的组合 <code>build/push and deploy</code></li><li><code>faas-cli build</code> -从受支持的语言类型构建Docker映像</li><li><code>faas-cli push</code> -将Docker映像推送到注册表中</li><li><code>faas-cli deploy</code> -将功能部署到本地或远程OpenFaaS网关</li><li><code>faas-cli remove</code> -从本地或远程OpenFaaS网关删除功能</li><li><code>faas-cli invoke</code> -调用函数并从STDIN读取请求的主体</li><li><code>faas-cli store</code> -允许浏览和部署OpenFaaS存储功能</li><li><code>faas-cli secret</code> -管理功能的秘密</li><li><code>faas-cli auth</code> -（alpha）启动OAuth2授权流程以获取cookie</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;常用指令&lt;/p&gt;
&lt;p&gt;CLI支持的主要命令是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;faas-cli new&lt;/code&gt; -通过当前目录中的模板创建新功能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;faas-cli login&lt;/code&gt; -存储OpenFaaS网关的基本身份验
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://imonster.me/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="https://imonster.me/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>openfaas函数部署</title>
    <link href="https://imonster.me/2020/02/21/openfaas%E5%87%BD%E6%95%B0%E9%83%A8%E7%BD%B2/"/>
    <id>https://imonster.me/2020/02/21/openfaas%E5%87%BD%E6%95%B0%E9%83%A8%E7%BD%B2/</id>
    <published>2020-02-21T03:30:27.000Z</published>
    <updated>2020-07-06T06:34:11.126Z</updated>
    
    <content type="html"><![CDATA[<ol><li>下载faas中的实例函数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git clone https:&#x2F;&#x2F;github.com&#x2F;openfaas&#x2F;faas.git &amp;&amp; cd .&#x2F;faas</span><br></pre></td></tr></table></figure><ol start="2"><li><p>保存登陆凭证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -n admin | faas-cli login -g http:&#x2F;&#x2F;localhost:31112 -u admin --password-stdin</span><br></pre></td></tr></table></figure></li><li><p>运行以下<code>faas-cli</code>命令，该命令获取堆栈清单的路径和OpenFaaS服务器的地址：</p></li></ol><a id="more"></a>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faas-cli deploy -f .&#x2F;faas&#x2F;stack.yml --gateway https:&#x2F;&#x2F;localhost:31112</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200221113451.jpg" alt=""></p><p>3.登陆ui界面查看function函数</p><p><img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200221113615.png" alt=""></p><p>查询部署的function函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -u admin:admin -X GET https:&#x2F;&#x2F;localhost：31112&#x2F;system&#x2F;functions | jq</span><br></pre></td></tr></table></figure><p>查看faas组件相关运行情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n openfaas</span><br></pre></td></tr></table></figure><p>查看faas部署的函数pod创建情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n openfaas-fn</span><br></pre></td></tr></table></figure><h3 id="2-自编译函数部署-python"><a href="#2-自编译函数部署-python" class="headerlink" title="2.自编译函数部署(python)"></a>2.自编译函数部署(python)</h3><p>1.创建函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faas-cli new --lang python hello-python</span><br></pre></td></tr></table></figure><p>这将为您创建三个文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello-python&#x2F;handler.py</span><br><span class="line">hello-python&#x2F;requirements.txt</span><br><span class="line">hello-python.yml</span><br></pre></td></tr></table></figure><p>2.编辑主函数handler.py(vi hello-python/handler.py)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def handle(req):</span><br><span class="line">    print(&quot;Hello! You said: &quot; + req)</span><br></pre></td></tr></table></figure><p>3.编辑编译的yml文件<code>hello-python.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">provider:</span><br><span class="line">  name: faas</span><br><span class="line">  gateway: http:&#x2F;&#x2F;localhost:8080</span><br><span class="line"></span><br><span class="line">functions:</span><br><span class="line">  hello-python:</span><br><span class="line">    lang: python</span><br><span class="line">    handler: .&#x2F;hello-python</span><br><span class="line">    image: localhost:5000&#x2F;hello-python  &#x2F;&#x2F;镜像存储地址</span><br></pre></td></tr></table></figure><p>yml文件的相关配置相关介绍</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gateway-在这里，我们可以根据需要指定远程网关，编程语言是什么以及处理程序在文件系统中的位置。</span><br><span class="line"></span><br><span class="line">functions -此块定义了我们堆栈中的函数</span><br><span class="line"></span><br><span class="line">lang: python-即使在后台使用Docker打包功能。除非您愿意，否则不必编写自己的Dockerfile。</span><br><span class="line"></span><br><span class="line">handler -这是您handler.py文件以及您需要的任何其他源代码的文件夹&#x2F;路径</span><br><span class="line"></span><br><span class="line">image-这是Docker映像名称。如果要推送到Docker Hub，请将前缀从hello-python更改为包括您的Docker Hub帐户-即longjie&#x2F;hello-python 并登陆。如果为私库更改为私库地址如：localhost:5000&#x2F;hello-python</span><br></pre></td></tr></table></figure><ol start="4"><li>编译函数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faas-cli build -f .&#x2F;hello-python.yml</span><br></pre></td></tr></table></figure><p>5.推送函数镜像到注册表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faas-cli push -f .&#x2F;hello-python.yml</span><br></pre></td></tr></table></figure><p>6.部署函数到openfaas服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faas-cli deploy -f .&#x2F;hello-python.yml --gateway http:&#x2F;&#x2F;localhost:31112</span><br></pre></td></tr></table></figure><p>7.登陆ui界面查看function函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:31112&#x2F;ui</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;下载faas中的实例函数&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Git clone https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;openfaas&amp;#x2F;faas.git &amp;amp;&amp;amp; cd .&amp;#x2F;faas&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;p&gt;保存登陆凭证&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;echo -n admin | faas-cli login -g http:&amp;#x2F;&amp;#x2F;localhost:31112 -u admin --password-stdin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运行以下&lt;code&gt;faas-cli&lt;/code&gt;命令，该命令获取堆栈清单的路径和OpenFaaS服务器的地址：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="https://imonster.me/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="https://imonster.me/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>openfaasOnK8s安装部署</title>
    <link href="https://imonster.me/2020/02/18/openfaasOnK8s%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <id>https://imonster.me/2020/02/18/openfaasOnK8s%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</id>
    <published>2020-02-18T04:00:22.000Z</published>
    <updated>2020-07-06T06:34:11.119Z</updated>
    
    <content type="html"><![CDATA[<p>1.使用 <code>brew</code> 或 <code>curl -sL cli.openfaas.com | sudo sh</code> 安装 <code>faas-cli</code></p><p><img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200219231312.png" alt=""></p><ol start="2"><li><p>安装brew</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install kubernetes-helm</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><p>   <img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200219231355.png" alt=""></p><ol start="3"><li><p>安装helm服务端tiller(3.0以上版本不需要安装)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system create sa tiller \</span><br><span class="line"> &amp;&amp; kubectl create clusterrolebinding tiller \</span><br><span class="line"> --clusterrole cluster-admin \</span><br><span class="line"> --serviceaccount&#x3D;kube-system:tiller</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200219231528.png" alt=""></p><p>​    添加 OpenFaas helm 的 repo并更新：（3.0异常版本）        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helm repo add openfaas https:&#x2F;&#x2F;openfaas.github.io&#x2F;faas-netes&#x2F;</span><br><span class="line">helm repo update</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dingdingMacBook-Pro:~ dingding$ git clone https:&#x2F;&#x2F;github.com&#x2F;openfaas&#x2F;faas-netes &amp;&amp; cd faas-netes</span><br><span class="line">Cloning into &#39;faas-netes&#39;...</span><br><span class="line">remote: Enumerating objects: 1379, done.</span><br><span class="line">remote: Counting objects: 100% (1379&#x2F;1379), done.</span><br><span class="line">remote: Compressing objects: 100% (912&#x2F;912), done.</span><br><span class="line">remote: Total 11836 (delta 553), reused 967 (delta 406), pack-reused 10457</span><br><span class="line">Receiving objects: 100% (11836&#x2F;11836), 11.01 MiB | 40.00 KiB&#x2F;s, done.</span><br><span class="line">Resolving deltas: 100% (7013&#x2F;7013), done.</span><br><span class="line">Checking out files: 100% (2441&#x2F;2441), done.</span><br></pre></td></tr></table></figure><p>4、 克隆 Kubernetes 的 OpenFaaS 驱动程序 faas-netes： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;openfaas&#x2F;faas-netes &amp;&amp; cd faas-netes</span><br></pre></td></tr></table></figure><p>5、 Minikube 没有配置 RBAC，这里我们需要把 RBAC 关闭：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm upgrade --install --debug --reset-values --set async&#x3D;false --set rbac&#x3D;false openfaa</span><br></pre></td></tr></table></figure><p>6.创建 OpenFaas 命名空间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;openfaas&#x2F;faas-netes&#x2F;master&#x2F;namespaces.yml</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200220002429.png" alt=""></p><p>7.创建 OpenFaas 的管理员登录密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n openfaas create secret generic basic-auth --from-literal&#x3D;basic-auth-user&#x3D;admin --from-literal&#x3D;basic-auth-password&#x3D;1234567890</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dingdingMacBook-Pro:faas-netes dingding$ kubectl -n openfaas create secret generic basic-auth --from-literal&#x3D;basic-auth-user&#x3D;admin --from-literal&#x3D;basic-auth-password&#x3D;1234567890</span><br><span class="line">secret&#x2F;basic-auth created</span><br></pre></td></tr></table></figure><p>8.更新 OpenFaas 命名空间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm upgrade openfaas --install openfaas&#x2F;openfaas --namespace openfaas --set functionNamespace&#x3D;openfaas-fn --set basic_auth&#x3D;true</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200220002911.png" alt=""></p><p>9.首先登录 OpenFaas:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faas-cli login -g http:&#x2F;&#x2F;localhost:31112 -u admin -p 1234567890</span><br></pre></td></tr></table></figure><p>10查看 OpenFaas 基础服务的 Pod：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n openfaas</span><br></pre></td></tr></table></figure><p>11.登陆ui查看openfaas(<a href="http://localhost:31112/ui" target="_blank" rel="noopener">http://localhost:31112/ui</a>)</p><p><img src="https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200221113615.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.使用 &lt;code&gt;brew&lt;/code&gt; 或 &lt;code&gt;curl -sL cli.openfaas.com | sudo sh&lt;/code&gt; 安装 &lt;code&gt;faas-cli&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dingzhenying/MDGif/master/img/20200219231312.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;p&gt;安装brew&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install kubernetes-helm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="https://imonster.me/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="https://imonster.me/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Flink_BasicTypelnfo与java原生数据类型转换</title>
    <link href="https://imonster.me/2020/01/02/Flink_BasicTypelnfo%E4%B8%8Ejava%E5%8E%9F%E7%94%9F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://imonster.me/2020/01/02/Flink_BasicTypelnfo%E4%B8%8Ejava%E5%8E%9F%E7%94%9F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</id>
    <published>2020-01-02T03:19:57.000Z</published>
    <updated>2020-07-06T06:34:10.621Z</updated>
    
    <content type="html"><![CDATA[<p>Flink通过实现 BasicTypelnfo数据类型,能够支持任意Java原生基本类型(装箱)<br>或 String类型,例如 Integer、 String、 Double等<br>如以下代码所示,通过从给定的元素集中创建 DataStream数据集。</p><p>//创建Int类型的数据集<br>val instream: DataStream[Int]= env. fromElements(3, 1,2,1,5)</p><p>//创建 string类型的数据集<br>val datastream: DataStream[ String] env fromElements(“hello”,”fink”)</p><p>Flink实现另外一种 TypeInfomation是 Basic Array TypeInfo,对应的是Java基本类<br>型数组(装箱)或 String对象的数组,如下代码通过使用Aray数组和List集合创建<br>DataStream数据集。</p><a id="more"></a><p>//通过从数组中创建数据集</p><p>val dataStream: DataStream[ Int]= env. fromCollection(Array (3, 1, 2, 1, 5))</p><p>//通过List集合创建数据集</p><p>val dataStream: DataStream[Int] =env. fromCollection(List(3, l,2,1, 5))</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flink通过实现 BasicTypelnfo数据类型,能够支持任意Java原生基本类型(装箱)&lt;br&gt;或 String类型,例如 Integer、 String、 Double等&lt;br&gt;如以下代码所示,通过从给定的元素集中创建 DataStream数据集。&lt;/p&gt;
&lt;p&gt;//创建Int类型的数据集&lt;br&gt;val instream: DataStream[Int]= env. fromElements(3, 1,2,1,5)&lt;/p&gt;
&lt;p&gt;//创建 string类型的数据集&lt;br&gt;val datastream: DataStream[ String] env fromElements(“hello”,”fink”)&lt;/p&gt;
&lt;p&gt;Flink实现另外一种 TypeInfomation是 Basic Array TypeInfo,对应的是Java基本类&lt;br&gt;型数组(装箱)或 String对象的数组,如下代码通过使用Aray数组和List集合创建&lt;br&gt;DataStream数据集。&lt;/p&gt;
    
    </summary>
    
    
      <category term="flink" scheme="https://imonster.me/categories/flink/"/>
    
    
      <category term="flink" scheme="https://imonster.me/tags/flink/"/>
    
  </entry>
  
  <entry>
    <title>K8S常见指令</title>
    <link href="https://imonster.me/2019/12/10/K8S%E5%B8%B8%E8%A7%81%E6%8C%87%E4%BB%A4/"/>
    <id>https://imonster.me/2019/12/10/K8S%E5%B8%B8%E8%A7%81%E6%8C%87%E4%BB%A4/</id>
    <published>2019-12-10T06:36:12.000Z</published>
    <updated>2020-07-06T06:34:11.281Z</updated>
    
    <content type="html"><![CDATA[<p>helm status 服务</p><p>查看命名空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get namespaces</span><br></pre></td></tr></table></figure><a id="more"></a><p>查看pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod -n hollysys-project</span><br><span class="line"></span><br><span class="line">kubectl get pods &#x2F;&#x2F;获取所有pods</span><br><span class="line"></span><br><span class="line">kubectl get services  &#x2F;&#x2F;获取所有服务</span><br><span class="line"></span><br><span class="line">kubectl get pods --all-namespaces</span><br><span class="line">kubectl get pods -A</span><br><span class="line"></span><br><span class="line">kubectl describe pod $&#123;podName&#125;</span><br></pre></td></tr></table></figure><p><strong>创建服务</strong>（并创建端口）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment&#x2F;kubernetes-bootcamp --type&#x3D;&quot;NodePort&quot; --port 8080</span><br></pre></td></tr></table></figure><p><strong>删除指定pod</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete pod predict-1-analypredict-service-analypredict-7d4b5dd66d-kpvp8  -n hollysys-project</span><br></pre></td></tr></table></figure><p><strong>查看k8s日志</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs -f analytics-analytics-service-847d6bc47b-t9sjk -n hollysys-project</span><br></pre></td></tr></table></figure><p><strong>查看k8s pod描述</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe pod  analytics-analytics-service-analytics-b5d95cffd-4k65m -n hollysys-project</span><br></pre></td></tr></table></figure><p><strong>查看K8S 服务描述信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe services&#x2F;kubernetes-bootcamp  &#x2F;&#x2F;查看服务描述信息</span><br></pre></td></tr></table></figure><p><strong>创建、编辑deploy+</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f holliedge-deploy.yaml</span><br><span class="line">kubectl edit deploy haier-analytics-analytics-service-web -n robot-develop</span><br></pre></td></tr></table></figure><p><strong>k8s服务启动后通过服务环境执行指令（pod名称）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl exec $POD_NAME env    查看环境变量</span><br><span class="line"></span><br><span class="line">kubectl exec -ti $POD_NAME bash 启动bash指令</span><br></pre></td></tr></table></figure><h6 id="通过bash来操作环境信息："><a href="#通过bash来操作环境信息：" class="headerlink" title="通过bash来操作环境信息："></a>通过bash来操作环境信息：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat 查看文件</span><br><span class="line"></span><br><span class="line">curl  查看服务是否启动</span><br></pre></td></tr></table></figure><p><strong>获取pod阶段端口</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get services&#x2F;kubernetes-bootcamp -o go-template&#x3D;&#39;&#123;&#123;(index .spec.ports0).nodePort&#125;&#125;&#39;</span><br></pre></td></tr></table></figure><p><strong>获取部署列表</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployments  &#x2F;&#x2F;获取文件列表</span><br><span class="line">kubectl get pods&#x2F;&#x2F;获取pods列表</span><br><span class="line">kubectl describe pods &#x2F;&#x2F;获取pods描述信息</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/12/10/5c0e39ff23c9a.png" alt=""></p><p><em>DESIRED状态显示配置的副本数</em></p><p><em>CURRENT状态显示现在正在运行的副本数量</em></p><p><em>UP-TO-DATE是已更新以匹配所需（已配置）状态的副本数</em></p><p><em>AVILABLE状态显示实际可用于用户的副本数量</em></p><p><strong>获取服务端口信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get services&#x2F;kubernetes-bootcamp -o go-template&#x3D;&#39;&#123;&#123;(index .spec.ports0).nodePort&#125;&#125;&#39;</span><br></pre></td></tr></table></figure><p><strong>更新镜像信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl set image deployments&#x2F;kubernetes-bootcamp kubernetes-bootcamp&#x3D;jocatalin&#x2F;kubernetes-bootcamp:v2</span><br></pre></td></tr></table></figure><p><strong>更新镜像版本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl set image deployments&#x2F;kubernetes-bootcamp kubernetes-bootcamp&#x3D;gcr.io&#x2F;google-samples&#x2F;kubernetes-bootcamp:v10</span><br></pre></td></tr></table></figure><p><strong>版本回退</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout undo deployments&#x2F;kubernetes-bootcamp &#x2F;&#x2F;版本回滚</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-------------------kubectl---------------------------</span><br><span class="line">#删除pod重启</span><br><span class="line">kubectl delete pod datacleaning-datacleaningservice-dc-jobmanager-5c479c697f-qhgld  -n data-cleaning</span><br><span class="line"></span><br><span class="line">#进入pod容器</span><br><span class="line">kubectl exec -ti &lt;your-pod-name&gt;  -n &lt;your-namespace&gt;  -- &#x2F;bin&#x2F;sh</span><br><span class="line"></span><br><span class="line">#查看指定分区的pod</span><br><span class="line"> kubectl get pod -n flink</span><br><span class="line"> #查看创建的service</span><br><span class="line"> kubectl get service -n flink</span><br><span class="line"> #修改创建的pod配置信息</span><br><span class="line"> kubectl edit svc -n ding-flink-test flink-jobmanager</span><br><span class="line"># kubectl run hello-minikube --image&#x3D;k8s.gcr.io&#x2F;echoserver:1.4 --port&#x3D;8080 # 启动服务器</span><br><span class="line"># kubectl get po -A # 查看pod状态</span><br><span class="line"># kubectl expose deployment hello-minikube --type&#x3D;NodePort # 将服务公开为NodePort</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;helm status 服务&lt;/p&gt;
&lt;p&gt;查看命名空间&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl get namespaces&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="工具环境搭建\K8S" scheme="https://imonster.me/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-K8S/"/>
    
    
      <category term="工具环境搭建\K8S" scheme="https://imonster.me/tags/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-K8S/"/>
    
  </entry>
  
</feed>
